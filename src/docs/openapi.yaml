openapi: 3.1.1
info:
    title: CampusNet API
    version: v1.0.0
    description: |-
        API for CampusNet, a student-centric web application to bring university communities together.
        It enables students to form verified groups, post campus news, organize events, and connect with peers.
    contact:
        name: CampusNet Development Team
        email: xyz@campusnet.dev

servers:
    - url: http://localhost:3000/api/v1/
      description: Local server
    - url: https://campusnet-api.onrender.com/api/v1/
      description: Production server

tags:
    - name: Authentication
      description: User authentication and authorization.
    - name: Users
      description: User management and profiles.
    - name: User Profile Sections
      description: Specific sections of a user's profile like education and achievements.
    - name: Universities
      description: Management of university entities.
    - name: Communities
      description: University-specific communities.
    - name: Groups
      description: Sub-communities or clubs within a main community.
    - name: Posts
      description: User-generated content, news, and announcements.
    - name: Events
      description: Campus events and organization.
    - name: Polls
      description: Voting and polling features.
    - name: Comments
      description: Comments on posts and events.
    - name: Reactions
      description: Reactions to posts and comments.
    - name: Connections
      description: User-to-user connections and networking.
    - name: Messages
      description: Direct messaging between users.
    - name: Notifications
      description: User notifications.
    - name: Tags
      description: Content tagging and categorization.
    - name: Search
      description: Global search functionality.
    - name: Calendar
      description: Calendar endpoints

components:
    # =====================================================
    # Security Definitions
    # =====================================================
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: |
                JWT (JSON Web Token) authentication.
                The token is obtained from the `/auth/login` or `/auth/register` endpoints.
                It must be included in the `Authorization` header with the `Bearer` prefix.
                Example: `Authorization: Bearer <your_jwt_token>`

    # =====================================================
    # Common Headers
    # =====================================================
    headers:
        X-RateLimit-Limit:
            description: The maximum number of requests you're permitted to make per minute.
            schema:
                type: integer
            example: 100
        X-RateLimit-Remaining:
            description: The number of requests remaining in the current rate limit window.
            schema:
                type: integer
            example: 99
        X-RateLimit-Reset:
            description: The time at which the current rate limit window resets, in UTC epoch seconds.
            schema:
                type: integer
            example: 1678886400

    parameters:
        userIdParam:
            name: userId
            in: path
            required: true
            description: Identifier of the user.
            schema:
                type: string
                format: uuid
        universityIdParam:
            name: universityId
            in: path
            required: true
            description: Identifier of the university.
            schema:
                type: string
                format: uuid
        communityIdParam:
            name: communityId
            in: path
            required: true
            description: Identifier of the community.
            schema:
                type: string
                format: uuid
        groupIdParam:
            name: groupId
            in: path
            required: true
            description: Identifier of the group.
            schema:
                type: string
                format: uuid
        postIdParam:
            name: postId
            in: path
            required: true
            description: Identifier of the post.
            schema:
                type: string
                format: uuid
        eventIdParam:
            name: eventId
            in: path
            required: true
            description: Identifier of the event.
            schema:
                type: string
                format: uuid
        pollIdParam:
            name: pollId
            in: path
            required: true
            description: Identifier of the poll.
            schema:
                type: string
                format: uuid
        commentIdParam:
            name: commentId
            in: path
            required: true
            description: Identifier of the comment.
            schema:
                type: string
                format: uuid
        notificationIdParam:
            name: notificationId
            in: path
            required: true
            description: Identifier of the notification.
            schema:
                type: string
                format: uuid
        educationIdParam:
            name: educationId
            in: path
            required: true
            description: Identifier of the education entry.
            schema:
                type: string
                format: uuid
        achievementIdParam:
            name: achievementId
            in: path
            required: true
            description: Identifier of the achievement entry.
            schema:
                type: string
                format: uuid
        connectionRequestIdParam:
            name: requestId
            in: path
            required: true
            description: Identifier of the connection request.
            schema:
                type: string
                format: uuid

        # Query Parameters
        pageParam:
            name: page
            in: query
            description: Page number for pagination.
            schema:
                type: integer
                default: 1
                minimum: 1
        limitParam: # Number of items per page.
            name: limit
            in: query
            description: Maximum number of items to return per page (max 100).
            schema:
                type: integer
                default: 10
                minimum: 1
                maximum: 100
        searchQueryParam:
            name: search
            in: query
            description: Search term.
            schema:
                type: string
                minLength: 1
            example: "hackathon"
        sortQueryParam:
            name: sort
            in: query
            description: Sorting term
            schema:
                type: string
                minLength: 1
            example: "name_asc"
        tagQueryParam:
            name: tag
            in: query
            description: Filter by tag name.
            schema:
                type: string
            example: "programming"
        tagsQueryParam:
            name: tags[] # For multiple tags
            in: query
            description: Filter results by one or more tag names.
            required: false
            style: form
            explode: true
            schema:
                type: array
                items:
                    type: string
                maxItems: 5
            example: ["programming", "contest"]

    schemas:
        # ----------------------
        # ENUMERATIONS
        # ----------------------
        UserRoleEnum:
            $ref: "./schemas/enums/UserRoleEnum.yaml"
        EduLevelEnum:
            $ref: "./schemas/enums/EduLevelEnum.yaml"
        CommunityRoleEnum:
            $ref: "./schemas/enums/CommunityRoleEnum.yaml"
        PostStatusEnum:
            $ref: "./schemas/enums/PostStatusEnum.yaml"
        EventStatusEnum:
            $ref: "./schemas/enums/EventStatusEnum.yaml"
        EventAttendeeStatusEnum:
            $ref: "./schemas/enums/EventAttendeeStatusEnum.yaml"
        ConnectionStatusEnum:
            $ref: "./schemas/enums/ConnectionStatusEnum.yaml"
        ReactionTypeEnum:
            $ref: "./schemas/enums/ReactionTypeEnum.yaml"
        NotificationTypeEnum:
            $ref: "./schemas/enums/NotificationTypeEnum.yaml"
        RelatedEntityTypeName:
            $ref: "./schemas/enums/RelatedEntityType.yaml"

        # Common Error Structure
        ErrorResponse:
            $ref: "./schemas/ErrorResponse.yaml"

        # Common Model structure
        UserWithProfile:
            $ref: "./schemas/UserWithProfile.yaml"

        UserBase:
            $ref: "./schemas/UserBase.yaml"

        University:
            $ref: "./schemas/University.yaml"

        User:
            $ref: "./schemas/User.yaml"

        UserProfile:
            $ref: "./schemas/UserProfile.yaml"

        Education:
            $ref: "./schemas/Education.yaml"

        Achievement:
            $ref: "./schemas/Achievement.yaml"

        Community:
            $ref: "./schemas/Community.yaml"

        CommunityMember:
            $ref: "./schemas/CommunityMember.yaml"

        Group:
            $ref: "./schemas/Group.yaml"

        GroupMember:
            $ref: "./schemas/GroupMember.yaml"

        Tag:
            $ref: "./schemas/Tag.yaml"

        Post:
            $ref: "./schemas/Post.yaml"

        Event:
            $ref: "./schemas/Event.yaml"

        EventAttendee:
            $ref: "./schemas/EventAttendee.yaml"

        PollOption:
            $ref: "./schemas/PollOption.yaml"

        Poll:
            $ref: "./schemas/Poll.yaml"

        PollVote:
            $ref: "./schemas/PollVote.yaml"

        Comment:
            $ref: "./schemas/Comment.yaml"

        Reaction:
            $ref: "./schemas/Reaction.yaml"

        UserConnection:
            $ref: "./schemas/UserConnection.yaml"

        Message:
            $ref: "./schemas/Message.yaml"

        Conversation:
            $ref: "./schemas/Conversation.yaml"

        Notification:
            $ref: "./schemas/Notification.yaml"

        PaginationMetadata:
            $ref: "./schemas/PaginationMetadata.yaml"

        PaginatedResponseBase:
            type: object
            properties:
                meta:
                    $ref: "#/components/schemas/PaginationMetadata"
            required:
                - meta

        SuccessMessage:
            $ref: "./schemas/SuccessMessage.yaml"

        AuthToken:
            $ref: "./schemas/AuthToken.yaml"

        # /auth requests
        AuthRegisterRequest:
            $ref: "./schemas/requests/AuthRegisterRequest.yaml"

        AuthLoginRequest:
            $ref: "./schemas/requests/AuthLoginRequest.yaml"

        EmailOnlyRequest:
            $ref: "./schemas/requests/EmailOnlyRequest.yaml"

        ResetPasswordRequest:
            $ref: "./schemas/requests/ResetPasswordRequest.yaml"

        # /users requests
        ChangePasswordRequest:
            $ref: "./schemas/requests/ChangePasswordRequest.yaml"

        # /users/me/profile requests
        UserProfileUpdateRequest:
            $ref: "./schemas/requests/UserProfileUpdateRequest.yaml"

        EducationRequest:
            $ref: "./schemas/requests/EducationRequest.yaml"

        AchievementRequest:
            $ref: "./schemas/requests/AchievementRequest.yaml"

        UniversityRequest:
            $ref: "./schemas/requests/UniversityRequest.yaml"

        CommunityRequest:
            $ref: "./schemas/requests/CommunityRequest.yaml"

        CommunityMemberRoleRequest:
            type: object
            properties:
                role:
                    $ref: "#/components/schemas/CommunityRoleEnum"
            required:
                - role

        GroupRequest:
            $ref: "./schemas/requests/GroupRequest.yaml"

        GroupMemberRoleRequest:
            type: object
            properties:
                role:
                    $ref: "#/components/schemas/CommunityRoleEnum" # Using community role
            required:
                - role

        GroupMemberRequest:
            type: object
            description: Represents a user's request to join a group.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                groupId:
                    type: string
                    format: uuid
                    readOnly: true
                userId:
                    type: string
                    format: uuid
                    readOnly: true
                role:
                    $ref: "#/components/schemas/CommunityRoleEnum"
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true

        PostRequest:
            type: object
            properties:
                content:
                    type: string
                    format: text
                authorId:
                    type: string
                    format: uuid
                communityId:
                    type: string
                    format: uuid
                    nullable: true
                groupId:
                    type: string
                    format: uuid
                    nullable: true
                images:
                    type: array
                    items:
                        type: string
                        format: url
                    nullable: true
                links:
                    type: array
                    items:
                        type: string
                        format: url
                    nullable: true
                isPublic:
                    type: boolean
                    default: true
                tags:
                    type: array
                    items:
                        type: string
                    nullable: true
            required:
                - content

        EventRequest:
            $ref: "./schemas/requests/EventRequest.yaml"

        EventAttendeeStatusRequest:
            $ref: "./schemas/requests/EventAttendeeRequest.yaml"

        PollOptionRequest:
            type: object
            properties:
                text:
                    type: string
                    maxLength: 255
            required:
                - text

        PollRequest:
            type: object
            properties:
                question:
                    type: string
                    maxLength: 500
                description:
                    type: string
                    format: text
                    nullable: true
                communityId:
                    type: string
                    format: uuid
                    nullable: true
                groupId:
                    type: string
                    format: uuid
                    nullable: true
                options:
                    type: array
                    items:
                        type: string # Just the text for new options
                    minItems: 2
                deadline:
                    type: string
                    format: date-time
                    nullable: true
                isPublic:
                    type: boolean
                    default: true
                allowMultipleVotes:
                    type: boolean
                    default: false
                showResultsBeforeDeadline:
                    type: boolean
                    default: true
            required:
                - question
                - options

        PollVoteRequest:
            type: object
            properties:
                selectedOptions: # Array of option IDs (UUIDs) or indices
                    type: array
                    items:
                        type: string # Assuming option IDs (UUIDs)
                    minItems: 1
            required:
                - selectedOptions

        CommentRequest:
            type: object
            properties:
                content:
                    type: string
                    format: text
                parentId:
                    type: string
                    format: uuid
                    nullable: true
            required:
                - content

        ReactionRequest:
            type: object
            properties:
                reactionType:
                    $ref: "#/components/schemas/ReactionTypeEnum"
            required:
                - reactionType

        ConnectionRequestRequest:
            type: object
            properties:
                recipientId:
                    type: string
                    format: uuid
            required:
                - recipientId

        BlockUserRequest:
            type: object
            properties:
                userIdToBlock:
                    type: string
                    format: uuid
            required:
                - userIdToBlock

        MessageRequest:
            type: object
            properties:
                recipientId:
                    type: string
                    format: uuid
                content:
                    type: string
                    format: text
            required:
                - recipientId
                - content

        TagRequest:
            type: object
            properties:
                name:
                    type: string
                    maxLength: 50
            required:
                - name

        BloodGroupRequest:
            type: object
            properties:
                bloodGroup:
                    type: string
                    maxLength: 5 # e.g., A+, O-
            required:
                - bloodGroup

        PaginatedUsersResponse:
            type: object
            properties:
                data:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserWithProfile"
                total:
                    type: integer
                page:
                    type: integer
                limit:
                    type: integer

        ########################
        # Responses schemas
        ########################
        LoginSuccessResponse:
            $ref: "./schemas/AuthResponses/LoginSuccessResponse.yaml"

        RefreshTokenResponse:
            $ref: "./schemas/AuthResponses/RefreshTokenResponse.yaml"

        AuthenticatedUserDetailsResponse:
            $ref: "./schemas/AuthResponses/AuthenticatedUserDetailsResponse.yaml"

        AllUsersResponse:
            $ref: "./schemas/AuthResponses/AllUsersResponse.yaml"

        CurrentUserProfileResponse:
            $ref: "./schemas/UserProfileResponse/CurrentProfileRespone.yaml"

        AllEducationResponse:
            $ref: "./schemas/UserProfileResponse/AllEducationResponse.yaml"

        SingleEducationResponse:
            $ref: "./schemas/UserProfileResponse/SingleEducationResponse.yaml"

        AllAchievementResponse:
            $ref: "./schemas/UserProfileResponse/AllAchievementResponse.yaml"

        SingleAchievementResponse:
            $ref: "./schemas/UserProfileResponse/SingleAchievementResponse.yaml"

        AllUniversityResponse:
            $ref: "./schemas/UniversityResponses/AllUniversities.yaml"

        SingleUniversityResponse:
            $ref: "./schemas/UniversityResponses/SingleUniversityResponse.yaml"

        AllCommunityResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        communities:
                            type: array
                            items:
                                $ref: "#/components/schemas/Community"

        PaginatedPostsResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        posts:
                            type: array
                            items:
                                $ref: "schemas/Post.yaml"
                meta:
                    $ref: "schemas/PaginationMetadata.yaml"

        CommunityResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        community:
                            $ref: "#/components/schemas/Community"

        PaginatedGroupResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        groups:
                            type: array
                            items:
                                $ref: "#/components/schemas/Group"
                meta:
                    $ref: "schemas/PaginationMetadata.yaml"

        SingleGroupResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        group:
                            $ref: "#/components/schemas/Group"

        PaginatedGroupMemberResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        members:
                            type: array
                            items:
                                $ref: "#/components/schemas/GroupMember"
                meta:
                    $ref: "schemas/PaginationMetadata.yaml"

        PaginatedGroupMemberRequestsResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        requests:
                            type: array
                            items:
                                $ref: "#/components/schemas/GroupMemberRequest"
                meta:
                    $ref: "schemas/PaginationMetadata.yaml"

        SinglePostResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        post:
                            $ref: "#/components/schemas/Post"

        # Event Response Schemas
        SingleEventResponse:
            $ref: "./schemas/EventResponses/SingleEventResponse.yaml"
        PaginatedEventsResponse:
            $ref: "./schemas/EventResponses/PaginatedEventResponse.yaml"
        SingleEventAttendeeResponse:
            $ref: "./schemas/EventResponses/SingleEventAttendeeResponse.yaml"
        PaginatedEventAttendeesResponse:
            $ref: "./schemas/EventResponses/PaginatedEventAttendeeResponse.yaml"

        PaginatedCommentResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        comments:
                            type: array
                            items:
                                $ref: "#/components/schemas/Comment"
                meta:
                    $ref: "schemas/PaginationMetadata.yaml"
        
        SingleCommentResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        comment:
                            $ref: "#/components/schemas/Comment"

        SingleReactionResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        reaction:
                            $ref: "#/components/schemas/Reaction"

        AllReactionResponse:
            type: object
            properties:
                message:
                    type: string
                data:
                    type: object
                    properties:
                        reactions:
                            type: array
                            items:
                                $ref: "#/components/schemas/Reaction"
            

    #=====================================================
    # Common Response Definitions
    #=====================================================
    responses:
        UnauthorizedError: # 401
            $ref: "./schemas/errors/Unauthorized.yaml"

        ForbiddenError: # 403
            $ref: "./schemas/errors/Forbidden.yaml"

        NotFoundError: # 404
            $ref: "./schemas/errors/NotFound.yaml"

        BadRequestError: # 400
            $ref: "./schemas/errors/BadRequest.yaml"

        ConflictError: # For 409
            $ref: "./schemas/errors/Conflict.yaml"

        TooManyRequestsError: # For 429
            $ref: "./schemas/errors/TooManyRequest.yaml"

        InternalServerError: # 500
            $ref: "./schemas/errors/InternalServerError.yaml"

        SuccessMessageResponse:
            description: Generic success response with a message.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessMessage"
                    example:
                        message:
                            type: string

# Paths will be extensive. Starting with Authentication.
paths:
    # --------------------------------------
    # Authentication Endpoints
    # --------------------------------------
    /auth/register:
        post:
            tags:
                - Authentication
            summary: Register a new user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AuthRegisterRequest"
            responses:
                "201":
                    description: User registered, verification email sent.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SuccessMessage"
                            example:
                                message: "Registration successful. Please check your email for verification."
                                data:
                                    userId: "abc-abc-abc-abc-abc"

                "400":
                    $ref: "#/components/responses/BadRequestError" # Missing fields, password mismatch, etc.
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/responses/NotFoundError"
                            example:
                                message: "University not found"
                "409":
                    $ref: "#/components/responses/ConflictError" # Email already exists
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/login:
        post:
            tags:
                - Authentication
            summary: Log in an existing user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AuthLoginRequest"
            responses:
                "200":
                    description: Login successful.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/LoginSuccessResponse"

                "400":
                    $ref: "#/components/responses/BadRequestError" # Missing fields
                "401":
                    $ref: "#/components/responses/UnauthorizedError" # Invalid credentials
                "403":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/responses/ForbiddenError"
                            example:
                                message: "Please verify your email before logging in."
                "404":
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/responses/NotFoundError"
                            example:
                                message: "User not found"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/verify-email:
        get:
            tags:
                - Authentication
            summary: Verify user's email using a token
            parameters:
                - name: token
                  in: query
                  required: true
                  description: Email verification token
                  schema:
                      type: string
            responses:
                "201":
                    description: Email verified successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SuccessMessage"
                            example:
                                message: "Email verified successfully"
                "400":
                    $ref: "#/components/responses/BadRequestError" # Invalid or expired token
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/resend-verification-email:
        post:
            tags:
                - Authentication
            summary: Resend verification email
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EmailOnlyRequest"
            responses:
                "200":
                    description: Verification email sent
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SuccessMessage"
                            example:
                                message: "Verification email sent!"
                "400":
                    $ref: "#/components/responses/BadRequestError" # Email already verified
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/forgot-password:
        post:
            tags:
                - Authentication
            summary: Initiate password reset process
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EmailOnlyRequest"
            responses:
                "200":
                    description: Password reset instructions sent
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SuccessMessage"
                            example:
                                message: "Password reset instructions sent to your email."
                "400":
                    $ref: "#/components/responses/BadRequestError" # Missing email
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/reset-password:
        post:
            tags:
                - Authentication
            summary: Reset password using a token
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ResetPasswordRequest"
            responses:
                "200":
                    description: Password reset successful
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SuccessMessage"
                            example:
                                message: "Password reset successful"
                "400":
                    $ref: "#/components/responses/BadRequestError" # Invalid token, password policy, etc.
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/refresh-token:
        post:
            tags:
                - Authentication
            summary: Obtain a new access token using refresh token from cookies
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Token refreshed successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/RefreshTokenResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError" # Invalid or missing refresh token
                "404":
                    $ref: "#/components/responses/NotFoundError" # User not found
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/logout:
        post:
            tags:
                - Authentication
            summary: Log out a user by invalidating refresh token
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Logout successful
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SuccessMessage"
                            example:
                                message: "Logout successful"
                "401":
                    $ref: "#/components/responses/UnauthorizedError" # Missing refresh token
                "500":
                    $ref: "#/components/responses/InternalServerError"

    # --------------------------------------
    # User Endpoints
    # --------------------------------------
    /users/me:
        get:
            tags:
                - Users
                - User Profiles
            summary: Get current authenticated user's details
            description: |
                Retrieves the complete profile information for the currently authenticated user.
                This includes core user data (`User` schema) and extended profile details (`UserProfile` schema).
            operationId: getCurrentUser
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Successfully retrieved current user's information.
                    headers:
                        X-RateLimit-Limit:
                            $ref: "#/components/headers/X-RateLimit-Limit"
                        X-RateLimit-Remaining:
                            $ref: "#/components/headers/X-RateLimit-Remaining"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AuthenticatedUserDetailsResponse"

                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users/me/password:
        patch:
            tags:
                - Users
            summary: Change current authenticated user's password
            description: |
                Allows the currently authenticated user to change their password.
                Requires the current password for verification before setting the new password.
            operationId: changeCurrentUserPassword
            security:
                - bearerAuth: []
            requestBody:
                description: Current and new password details.
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ChangePasswordRequest"

            responses:
                "200":
                    description: Password updated successfully.
                    headers:
                        X-RateLimit-Limit:
                            $ref: "#/components/headers/X-RateLimit-Limit"
                        X-RateLimit-Remaining:
                            $ref: "#/components/headers/X-RateLimit-Remaining"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/responses/SuccessMessageResponse"
                            example:
                                message: "Password updated successfully."
                "400": # For validation errors like weak new password or current password mismatch
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users/{userId}:
        get:
            tags:
                - Users
                - User Profiles
            summary: Get a specific user's public profile
            description: |
                Retrieves the public profile information for a specific user identified by their ID.
                The level of detail returned depends on the target user's profile visibility settings and the relationship between the authenticated user and the target user (e.g., if they are connected).
            operationId: getUserProfileById
            parameters:
                - $ref: "#/components/parameters/userIdParam"
            security:
                - bearerAuth: [] # Optional: Authenticated users might see more details based on privacy settings
            responses:
                "200":
                    description: Successfully retrieved user profile information.
                    headers:
                        X-RateLimit-Limit:
                            $ref: "#/components/headers/X-RateLimit-Limit"
                        X-RateLimit-Remaining:
                            $ref: "#/components/headers/X-RateLimit-Remaining"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserWithProfile" # Or a more restricted public profile schema

                "401": # If authentication is required for certain visibility levels and not provided
                    $ref: "#/components/responses/UnauthorizedError"
                "403": # If the authenticated user is not allowed to view this profile due to privacy settings
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users:
        get:
            tags:
                - Users
            summary: List and search users
            description: |
                Retrieves a paginated list of users.
                This endpoint is typically restricted to administrators or supports searching for public profiles.
                Supports filtering by university, role, and a general search query.
            operationId: listUsers
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/searchQueryParam" # For searching by name/username
                - name: universityId
                  in: query
                  description: Filter users by their associated university ID.
                  required: false
                  schema:
                      type: string
                      format: uuid
                  example: "223e4567-e89b-12d3-a456-426614174000"
            security:
                - bearerAuth: [] # Admin role might be required for full unfiltered list
            responses:
                "200":
                    description: A paginated list of users successfully retrieved.
                    headers:
                        X-RateLimit-Limit:
                            $ref: "#/components/headers/X-RateLimit-Limit"
                        X-RateLimit-Remaining:
                            $ref: "#/components/headers/X-RateLimit-Remaining"
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AllUsersResponse"

                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403": # If non-admin tries to access without sufficient search params for public profiles
                    $ref: "#/components/responses/ForbiddenError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    # --------------------------------------
    # User Profiles
    # --------------------------------------
    /users/me/profile:
        get:
            tags:
                - User Profile Sections
            summary: Get current authenticated user's profile
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: User profile details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CurrentUserProfileResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        put:
            tags:
                - User Profile Sections
            summary: Update current authenticated user's profile
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserProfileUpdateRequest"
            responses:
                "200":
                    description: Profile updated successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CurrentUserProfileResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users/me/profile/education:
        get:
            tags:
                - User Profile Sections
            summary: Get all education entries for the current user
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: List of education entries.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/AllEducationResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        post:
            tags:
                - User Profile Sections
            summary: Add education entry for the current user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EducationRequest"
            responses:
                "201":
                    description: Education entry created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleEducationResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users/me/profile/education/{educationId}:
        parameters:
            - $ref: "#/components/parameters/educationIdParam"
        put:
            tags:
                - User Profile Sections
            summary: Update an education entry
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EducationRequest"
            responses:
                "200":
                    description: Education entry updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleEducationResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - User Profile Sections
            summary: Delete an education entry
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Education entry deleted.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleEducationResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users/me/profile/achievements:
        get:
            tags:
                - User Profile Sections
            summary: Get all achievements for the current user
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: List of achievement entries.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AllAchievementResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        post:
            tags:
                - User Profile Sections
            summary: Add an achievement for the current user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AchievementRequest"
            responses:
                "201":
                    description: Achievement entry created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleAchievementResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users/me/profile/achievements/{achievementId}:
        parameters:
            - $ref: "#/components/parameters/achievementIdParam"
        put:
            tags:
                - User Profile Sections
            summary: Update an achievement entry
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AchievementRequest"
            responses:
                "200":
                    description: Achievement entry updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleAchievementResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - User Profile Sections
            summary: Delete an achievement entry
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Achievement entry deleted.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleAchievementResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    # --------------------------------------
    # Universities
    # --------------------------------------
    /universities:
        get:
            tags:
                - Universities
            summary: Get a list of all universities
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/searchQueryParam"
            responses:
                "200":
                    description: A list of universities.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AllUniversityResponse"

                "401":
                    $ref: "#/components/responses/UnauthorizedError"

                "500":
                    $ref: "#/components/responses/InternalServerError"
        post:
            tags:
                - Universities
            summary: Create a new university (Admin only)
            security:
                - bearerAuth: [] # Requires admin role
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UniversityRequest"
            responses:
                "201":
                    description: University created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleUniversityResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /universities/{universityId}:
        parameters:
            - $ref: "#/components/parameters/universityIdParam"
        get:
            tags:
                - Universities
            summary: Get details of a specific university
            responses:
                "200":
                    description: University details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleUniversityResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        put:
            tags:
                - Universities
            summary: Update a university's details (Admin only)
            security:
                - bearerAuth: [] # Requires admin role
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UniversityRequest"
            responses:
                "200":
                    description: University updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleUniversityResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Universities
            summary: Delete a university (Admin only)
            security:
                - bearerAuth: [] # Requires admin role
            responses:
                "204":
                    description: University deleted.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleUniversityResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Communities ---
    /communities:
        get:
            tags:
                - Communities
            summary: Get a list of communities
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/searchQueryParam"
                - $ref: "#/components/parameters/sortQueryParam"
                - name: universityId
                  in: query
                  description: Filter communities by university ID.
                  schema:
                      type: string
                      format: uuid
            responses:
                "200":
                    description: A list of communities.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AllCommunityResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

        post:
            tags:
                - Communities
            summary: Create a community (Admin/System action)
            security:
                - bearerAuth: [] # Requires admin role
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CommunityRequest"
            responses:
                "201":
                    description: Community created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CommunityResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /communities/{communityId}:
        parameters:
            - $ref: "#/components/parameters/communityIdParam"
        get:
            tags:
                - Communities
            summary: Get details of a specific community
            responses:
                "200":
                    description: Community details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CommunityResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        put:
            tags:
                - Communities
            summary: Update a community's details (Admin/Community Admin)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CommentRequest"
            responses:
                "200":
                    description: Community updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CommunityResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /communities/my:
        get:
            tags:
                - Communities
            summary: Get the community of the currently authenticated user
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: User's community details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CommunityResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /communities/{communityId}/members:
        parameters:
            - $ref: "#/components/parameters/communityIdParam"
        get:
            tags:
                - Communities
            summary: Get a list of members in a community
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/searchQueryParam"
                - name: role
                  in: query
                  schema:
                      $ref: "#/components/schemas/CommunityRoleEnum"
            responses:
                "200":
                    description: A list of community members.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/CommunityMember"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        post:
            tags:
                - Communities
            summary: Join a community (or request to join)
            description: Auto-joins if user's university matches and it's the main community.
            security:
                - bearerAuth: []
            responses:
                "201":
                    description: Successfully joined community or request sent.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CommunityMember"
                "400":
                    $ref: "#/components/responses/BadRequestError" # Already a member, or not eligible
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /communities/{communityId}/members/{userId}:
        parameters:
            - $ref: "#/components/parameters/communityIdParam"
            - $ref: "#/components/parameters/userIdParam"
        get:
            tags:
                - Communities
            summary: Get particular user within the specified community
            security:
                - bearerAuth: []
            response:
                "200":
                    description: Member details found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CommunityMember"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        put:
            tags:
                - Communities
            summary: Update a member's role (Admin/Community Admin)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CommunityMemberRoleRequest"
            responses:
                "200":
                    description: Member role updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CommunityMember"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Communities
            summary: Remove a member from a community (Admin/Community Admin or self-leave)
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Member removed.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SuccessMessage"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Groups ---
    /communities/{communityId}/groups:
        parameters:
            - $ref: "#/components/parameters/communityIdParam"
        get:
            tags:
                - Groups
            summary: Get all groups in a community
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: A paginated list of groups for the specified community.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedGroupResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        post:
            tags:
                - Groups
            summary: Create a new group in a community
            security:
                - bearerAuth: [ ]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GroupRequest"
            responses:
                "201":
                    description: Group created successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleGroupResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /groups:
        get:
            tags:
                - Groups
            summary: Get all groups
            description: Retrieves a paginated list of all groups across all communities.
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: A paginated list of groups.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedGroupResponse"
                "500":
                    $ref: "#/components/responses/InternalServerError"


    /groups/{groupId}:
        parameters:
            - $ref: "#/components/parameters/groupIdParam"
        get:
            tags:
                - Groups
            summary: Get a specific group by ID
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: Successfully retrieved group details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleGroupResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        put:
            tags:
                - Groups
            summary: Update a group
            security:
                - bearerAuth: [ ]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GroupRequest"
            responses:
                "200":
                    description: Group updated successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleGroupResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Groups
            summary: Delete a group
            security:
                - bearerAuth: [ ]
            responses:
                "204":
                    description: Group deleted successfully.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /groups/{groupId}/members:
        parameters:
            - $ref: "#/components/parameters/groupIdParam"
        get:
            tags:
                - Groups
            summary: Get all members of a group
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: A paginated list of group members.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedGroupMemberResponse"

                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /groups/{groupId}/members/{userId}:
        parameters:
            - $ref: "#/components/parameters/groupIdParam"
            - $ref: "#/components/parameters/userIdParam"
        put:
            tags:
                - Groups
            summary: Update a group member's role
            security:
                - bearerAuth: [ ]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GroupMemberRoleRequest"
            responses:
                "200":
                    description: Member role updated successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: string
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        delete:
            tags:
                - Groups
            summary: Remove a member from a group
            security:
                - bearerAuth: [ ]
            responses:
                "204":
                    description: Member removed successfully.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /groups/{groupId}/join:
        parameters:
            - $ref: "#/components/parameters/groupIdParam"
        post:
            tags:
                - Groups
            summary: Join a group
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: Successfully joined the group or request sent.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: string
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "409":
                    $ref: "#/components/responses/ConflictError" # e.g., Already a member or request pending
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /groups/{groupId}/leave:
        parameters:
            - $ref: "#/components/parameters/groupIdParam"
        post:
            tags:
                - Groups
            summary: Leave a group
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: Successfully left the group.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: string
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /groups/{groupId}/member-requests:
        parameters:
            - $ref: "#/components/parameters/groupIdParam"
        get:
            tags:
                - Groups
            summary: Get membership requests for a group
            security:
                - bearerAuth: [ ]
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
            responses:
                "200":
                    description: A paginated list of membership requests.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedGroupMemberRequestsResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /groups/{groupId}/member-requests/{userId}/approve:
        parameters:
            - $ref: "#/components/parameters/groupIdParam"
            - $ref: "#/components/parameters/userIdParam"
        post:
            tags:
                - Groups
            summary: Approve a membership request
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: Request approved successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: string
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /groups/{groupId}/member-requests/{userId}/reject:
        parameters:
            - $ref: "#/components/parameters/groupIdParam"
            - $ref: "#/components/parameters/userIdParam"
        post:
            tags:
                - Groups
            summary: Reject a membership request
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: Request rejected successfully.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message: string
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    # --- Posts ---
    /posts:
        get:
            tags:
                - Posts
            summary: Get a feed of posts
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - name: communityId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - name: groupId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - name: authorId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - name: isPublic
                  in: query
                  schema:
                      type: boolean
                - $ref: "#/components/parameters/tagQueryParam"
                - name: status
                  in: query
                  schema:
                      $ref: "#/components/schemas/PostStatusEnum"
                - name: sortBy
                  in: query
                  schema:
                      type: string
                      enum: [createdAt, viewCount, likeCount]
            responses:
                "200":
                    description: A list of posts.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedPostsResponse"
        post:
            tags:
                - Posts
            summary: Create a new post
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PostRequest"
            responses:
                "201":
                    description: Post created (might be pending approval).
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SinglePostResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError" # e.g., trying to post in a group not member of
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /posts/{postId}:
        parameters:
            - $ref: "#/components/parameters/postIdParam"
        get:
            security:
                - bearerAuth: []
            tags:
                - Posts
            summary: Get details of a specific post
            responses:
                "200":
                    description: Post details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SinglePostResponse"

                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        put:
            tags:
                - Posts
            summary: Update an existing post (Author or Admin/Moderator)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Post" # Can be partial
            responses:
                "200":
                    description: Post updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SinglePostResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Posts
            summary: Delete a post (Author or Admin/Moderator)
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Post deleted.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Post successfully deleted"


                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /posts/{postId}/approve:
        parameters:
            - $ref: "#/components/parameters/postIdParam"
        post:
            tags:
                - Posts
            summary: Approve a pending post (Admin/Moderator)
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Post approved.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SinglePostResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /posts/{postId}/feature:
        parameters:
            - $ref: "#/components/parameters/postIdParam"
        post:
            tags:
                - Posts
            summary: Feature an approved post (Admin/Moderator)
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: Post featured.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SinglePostResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /posts/{postId}/pin:
        parameters:
            - $ref: "#/components/parameters/postIdParam"
        post:
            tags:
                - Posts
            summary: Pin an approved post (Admin/Moderator)
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: Post pinned.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SinglePostResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"


    /users/me/posts/saved:
        get:
            tags:
                - Posts
            summary: Get posts saved by the current user
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
            responses:
                "200":
                    description: List of saved posts.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedPostsResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /users/me/posts/{postId}/save:
        parameters:
            - $ref: "#/components/parameters/postIdParam"
        post:
            tags:
                - Posts
            summary: Save a post for the current user
            security:
                - bearerAuth: []
            responses:
                "201":
                    description: Post saved.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Post saved!"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "409": # Conflict - already saved
                    $ref: "#/components/responses/BadRequestError"
        delete:
            tags:
                - Posts
            summary: Unsave a post for the current user
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Post unsaved.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Post successfully unsaved"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --------------------------------------
    # Events
    # --------------------------------------
    /events:
        post:
            tags:
                - Events
            summary: Create a new event
            security:
                - bearerAuth: [ ]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EventRequest"
            responses:
                "201":
                    description: Event created successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleEventResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
        get:
            tags:
                - Events
            summary: Get a list of events
            parameters:
                - name: communityId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - name: groupId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - name: isPublic
                  in: query
                  schema:
                      type: boolean
                - name: status
                  in: query
                  schema:
                      $ref: "#/components/schemas/EventStatusEnum"
                - name: startDate
                  in: query
                  schema:
                      type: string
                      format: date
                - name: tag
                  in: query
                  schema:
                      type: string
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
            responses:
                "200":
                    description: An array of event objects.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedEventsResponse"

    /events/{eventId}:
        parameters:
            - $ref: "#/components/parameters/eventIdParam"
        get:
            tags:
                - Events
            summary: Get details of a specific event
            security:
                - bearerAuth: [ ]
            responses:
                "200":
                    description: Event object.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleEventResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        put:
            tags:
                - Events
            summary: Update an existing event
            description: Only the organizer or an admin/moderator can update an event.
            security:
                - bearerAuth: [ ]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EventRequest"
            responses:
                "200":
                    description: Updated event object.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleEventResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Events
            summary: Delete an event
            description: Only the organizer or an admin/moderator can delete an event.
            security:
                - bearerAuth: [ ]
            responses:
                "204":
                    description: Event deleted successfully.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /events/{eventId}/attendees:
        parameters:
            - $ref: "#/components/parameters/eventIdParam"
        post:
            tags:
                - Events
            summary: Mark user as interested or attending
            security:
                - bearerAuth: [ ]
            requestBody:
                $ref: "#/components/schemas/EventAttendeeStatusRequest"
            responses:
                "201":
                    description: Status updated successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleEventAttendeeResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "409":
                    $ref: "#/components/responses/ConflictError"
        get:
            tags:
                - Events
            summary: Get a list of attendees for an event
            security:
                - bearerAuth: [ ]
            parameters:
                - name: status
                  in: query
                  schema:
                      $ref: "#/components/schemas/EventAttendeeStatusEnum"
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
            responses:
                "200":
                    description: An array of event attendee objects.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedEventAttendeesResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /events/{eventId}/attendees/me:
        parameters:
            - $ref: "#/components/parameters/eventIdParam"
        delete:
            tags:
                - Events
            summary: Remove user's attendance status
            security:
                - bearerAuth: [ ]
            responses:
                "204":
                    description: Attendance status removed successfully.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /users/me/events:
        get:
            tags:
                - Events
            summary: Get events for the current user
            security:
                - bearerAuth: [ ]
            parameters:
                - name: status
                  in: query
                  schema:
                      $ref: "#/components/schemas/EventAttendeeStatusEnum"
            responses:
                "200":
                    description: An array of event objects.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedEventsResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /communities/{communityId}/events:
        parameters:
            - $ref: "#/components/parameters/communityIdParam"
        get:
            tags:
                - Events
            summary: Get events for a specific community
            responses:
                "200":
                    description: An array of event objects.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedEventsResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        post:
            tags:
                - Events
            summary: Create an event within a community
            security:
                - bearerAuth: [ ]
            requestBody:
                $ref: "#/components/schemas/EventRequest"
            responses:
                "201":
                    description: Event created successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleEventResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /groups/{groupId}/events:
        parameters:
            - $ref: "#/components/parameters/groupIdParam"
        get:
            tags:
                - Events
            summary: Get events for a specific group
            responses:
                "200":
                    description: An array of event objects.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedEventsResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        post:
            tags:
                - Events
            summary: Create an event within a group
            security:
                - bearerAuth: [ ]
            requestBody:
                $ref: "#/components/schemas/EventRequest"
            responses:
                "201":
                    description: Event created successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleEventResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Polls (similar structure to Posts) ---
    # GET /polls, POST /polls
    # GET /polls/{pollId}, PUT /polls/{pollId}, DELETE /polls/{pollId}
    # POST /polls/{pollId}/approve, POST /polls/{pollId}/reject
    # POST /polls/{pollId}/votes, GET /polls/{pollId}/votes, GET /polls/{pollId}/results

    # --- Comments ---
    /posts/{postId}/comments:
        parameters:
            - $ref: "#/components/parameters/postIdParam"
        get:
            tags:
                - Comments
            summary: Get comments for a post
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - name: sortBy
                  in: query
                  schema:
                      type: string
                      enum: [createdAt, likeCount]
            responses:
                "200":
                    description: List of comments.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedCommentResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        post:
            tags:
                - Comments
            summary: Add a comment to a post
            security:
                - bearerAuth: []
            requestBody:
                description: Among parentId(parent comment), postId or eventId give one accordingly
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CommentRequest"
            responses:
                "201":
                    description: Comment created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleCommentResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # GET /events/{eventId}/comments, POST /events/{eventId}/comments (similar to post comments)

    /comments/{commentId}:
        parameters:
            - $ref: "#/components/parameters/commentIdParam"
        post:
            tags:
                - Comments
            summary: Add a comment to a comment
            security:
                - bearerAuth: [ ]
            requestBody:
                description: Among parentId(parent comment), postId or eventId give one accordingly
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CommentRequest"
            responses:
                "201":
                    description: Comment created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleCommentResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        put:
            tags:
                - Comments
            summary: Update a comment (Author)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                content:
                                    type: string
                                    format: text
                            required:
                                - content
            responses:
                "200":
                    description: Comment updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleCommentResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Comments
            summary: Delete a comment (Author or Admin/Moderator)
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Comment deleted.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Comment successfully deleted"

                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /comment/{commentId}/comments:
        parameters:
            - $ref: "#/components/parameters/commentIdParam"
        get:
            tags:
                - Comments
            summary: Get comments for a post
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - name: sortBy
                  in: query
                  schema:
                      type: string
                      enum: [ createdAt, likeCount ]
            responses:
                "200":
                    description: List of comments.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedCommentResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Reactions ---
    /posts/{postId}/reactions:
        parameters:
            - $ref: "#/components/parameters/postIdParam"
        post:
            tags:
                - Reactions
            summary: Add or update a reaction to a post
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ReactionRequest"
            responses:
                "201":
                    description: Reaction added/updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleReactionResponse" # Or just updated post like_count
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        get:
            tags:
                - Reactions
            summary: Get reactions for a post
            parameters:
                - name: type
                  in: query
                  schema:
                      $ref: "#/components/schemas/ReactionTypeEnum"
            responses:
                "200":
                    description: List of reactions.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/AllReactionResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /posts/{postId}/reactions/{reactionId}:
        delete: # To remove user's own reaction
            tags:
                - Reactions
            summary: Remove a reaction from a post
            security:
                - bearerAuth: [ ]
            responses:
                "204":
                    description: Reaction removed.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Reaction removed"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError" # Post or reaction not found

    /comments/{commentId}/reactions:
        parameters:
            - $ref: "#/components/parameters/commentIdParam"
        post:
            tags:
                - Reactions
            summary: Add or update a reaction to a post
            security:
                - bearerAuth: [ ]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ReactionRequest"
            responses:
                "201":
                    description: Reaction added/updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/SingleReactionResponse" # Or just updated post like_count
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        get:
            tags:
                - Reactions
            summary: Get reactions for a post
            parameters:
                - name: type
                  in: query
                  schema:
                      $ref: "#/components/schemas/ReactionTypeEnum"
            responses:
                "200":
                    description: List of reactions.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/AllReactionResponse"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /comments/{commentId}/reactions/{reactionId}:
        delete: # To remove user's own reaction
            tags:
                - Reactions
            summary: Remove a reaction from a post
            security:
                - bearerAuth: [ ]
            responses:
                "204":
                    description: Reaction removed.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                                        example: "Reaction removed"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError" # Post or reaction not found

    # /comments/{commentId}/reactions (similar to post reactions)

    # --- User Connections ---
    /connections/request:
        post:
            tags:
                - Connections
            summary: Send a connection request to a user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ConnectionRequestRequest"
            responses:
                "201":
                    description: Connection request sent.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserConnection"
                "400":
                    $ref: "#/components/responses/BadRequestError" # e.g., request to self, already connected/pending
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError" # Recipient not found

    /connections/requests/pending:
        get:
            tags:
                - Connections
            summary: Get pending connection requests for the authenticated user
            security:
                - bearerAuth: []
            parameters:
                - name: type
                  in: query
                  schema:
                      type: string
                      enum: [sent, received]
            responses:
                "200":
                    description: List of pending connection requests.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/UserConnection"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /connections/requests/{requestId}/accept:
        parameters:
            - $ref: "#/components/parameters/connectionRequestIdParam"
        post:
            tags:
                - Connections
            summary: Accept a connection request
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Connection request accepted.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserConnection"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError" # Not the recipient
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /connections/requests/{requestId}/reject:
        parameters:
            - $ref: "#/components/parameters/connectionRequestIdParam"
        post:
            tags:
                - Connections
            summary: Reject a connection request
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Connection request rejected.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserConnection"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /connections:
        get:
            tags:
                - Connections
            summary: Get a list of accepted connections for the authenticated user
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/searchQueryParam"
            responses:
                "200":
                    description: List of connected users.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User" # Or UserWithProfile
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /connections/{userId}: # To remove a connection
        parameters:
            - $ref: "#/components/parameters/userIdParam"
        delete:
            tags:
                - Connections
            summary: Remove a connection with another user
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Connection removed.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Messages ---
    /messages:
        post:
            tags:
                - Messages
            summary: Send a message to another user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageRequest"
            responses:
                "201":
                    description: Message sent.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Message"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError" # Recipient not found

    /messages/chat/{userId}:
        parameters:
            - $ref: "#/components/parameters/userIdParam"
        get:
            tags:
                - Messages
            summary: Get chat history with a specific user
            security:
                - bearerAuth: []
            parameters:
                - name: before # For pagination (messageId or timestamp)
                  in: query
                  schema:
                      type: string
                - $ref: "#/components/parameters/limitParam"
            responses:
                "200":
                    description: Chat history.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Message"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /messages/conversations:
        get:
            tags:
                - Messages
            summary: Get a list of conversations for the authenticated user
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
            responses:
                "200":
                    description: List of conversations.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Conversation"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    # --- Notifications ---
    /notifications:
        get:
            tags:
                - Notifications
            summary: Get notifications for the authenticated user
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - name: isRead
                  in: query
                  schema:
                      type: boolean
            responses:
                "200":
                    description: List of notifications.
                    content:
                        application/json:
                            schema:
                                type: array # PaginatedNotificationsResponse
                                items:
                                    $ref: "#/components/schemas/Notification"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /notifications/{notificationId}/read:
        parameters:
            - $ref: "#/components/parameters/notificationIdParam"
        post:
            tags:
                - Notifications
            summary: Mark a specific notification as read
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Notification marked as read.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Notification"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /notifications/read-all:
        post:
            tags:
                - Notifications
            summary: Mark all notifications as read
            security:
                - bearerAuth: []
            responses:
                "200":
                    $ref: "#/components/responses/SuccessMessageResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    # --- Tags ---
    /tags:
        get:
            tags:
                - Tags
            summary: Get a list of all tags
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/searchQueryParam"
            responses:
                "200":
                    description: A list of tags.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Tag"
        post:
            tags:
                - Tags
            summary: Create a new tag (Admin or implicit)
            security:
                - bearerAuth: [] # Admin for direct creation
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TagRequest"
            responses:
                "201":
                    description: Tag created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Tag"
                "400":
                    $ref: "#/components/responses/BadRequestError" # e.g., tag already exists
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"

    # --- Search ---
    /search:
        get:
            tags:
                - Search
            summary: Global search endpoint
            parameters:
                - name: q
                  in: query
                  required: true
                  description: Search query.
                  schema:
                      type: string
                - name: type
                  in: query
                  description: Type of content to search.
                  schema:
                      type: string
                      enum: [posts, events, users, groups, communities]
                - name: universityId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - $ref: "#/components/parameters/tagsQueryParam"
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
            responses:
                "200":
                    description: Search results.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    posts:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Post"
                                    events:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Event"
                                    users:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/UserWithProfile"
                                    groups:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Group"
                                    communities:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Community"
                "400":
                    $ref: "#/components/responses/BadRequestError" # e.g., missing query

    # --- Miscellaneous ---
    /users/me/calendar:
        get:
            tags:
                - Miscellaneous
            summary: Get a calendar view of user's events
            security:
                - bearerAuth: []
            parameters:
                - name: month
                  in: query
                  description: Month in YYYY-MM format.
                  schema:
                      type: string
                      pattern: '^\d{4}-\d{2}$'
                - name: view
                  in: query
                  schema:
                      type: string
                      enum: [month, week, day]
            responses:
                "200":
                    description: Calendar events.
                    content:
                        application/json:
                            schema:
                                type: array # Structure depends on calendar view needs
                                items:
                                    $ref: "#/components/schemas/Event"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /users/me/profile/blood-group:
        post:
            tags:
                - User Profile Sections
                - Miscellaneous
            summary: Set or update user's blood group
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BloodGroupRequest"
            responses:
                "200":
                    description: Blood group updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserProfile" # Or just success message
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
