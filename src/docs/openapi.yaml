openapi: 3.1.1
info:
    title: CampusNet API
    version: v1.0.0
    description: |-
        API for CampusNet, a student-centric web application to bring university communities together.
        It enables students to form verified groups, post campus news, organize events, and connect with peers.
    contact:
        name: CampusNet Development Team
        email: xyz@campusnet.dev

servers:
    - url: http://localhost:3000/api/docs/v1
      description: Local server
    - url: https://campusnet-api.onrender.com/api/docs/v1
      description: Production server

tags:
    - name: Authentication
      description: User authentication and authorization.
    - name: Users
      description: User management and profiles.
    - name: User Profile Sections
      description: Specific sections of a user's profile like education and achievements.
    - name: Universities
      description: Management of university entities.
    - name: Communities
      description: University-specific communities.
    - name: Groups
      description: Sub-communities or clubs within a main community.
    - name: Posts
      description: User-generated content, news, and announcements.
    - name: Events
      description: Campus events and organization.
    - name: Polls
      description: Voting and polling features.
    - name: Comments
      description: Comments on posts and events.
    - name: Reactions
      description: Reactions to posts and comments.
    - name: Connections
      description: User-to-user connections and networking.
    - name: Messages
      description: Direct messaging between users.
    - name: Notifications
      description: User notifications.
    - name: Tags
      description: Content tagging and categorization.
    - name: Search
      description: Global search functionality.
    - name: Calendar
      description: Calendar endpoints

components:
    # =====================================================
    # Security Definitions
    # =====================================================
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: |
                JWT (JSON Web Token) authentication.
                The token is obtained from the `/auth/login` or `/auth/register` endpoints.
                It must be included in the `Authorization` header with the `Bearer` prefix.
                Example: `Authorization: Bearer <your_jwt_token>`

    # =====================================================
    # Common Headers
    # =====================================================
    headers:
        X-RateLimit-Limit:
            description: The maximum number of requests you're permitted to make per minute.
            schema:
                type: integer
            example: 100
        X-RateLimit-Remaining:
            description: The number of requests remaining in the current rate limit window.
            schema:
                type: integer
            example: 99
        X-RateLimit-Reset:
            description: The time at which the current rate limit window resets, in UTC epoch seconds.
            schema:
                type: integer
            example: 1678886400

    parameters:
        userIdParam:
            name: userId
            in: path
            required: true
            description: Identifier of the user.
            schema:
                type: string
                format: uuid
        universityIdParam:
            name: universityId
            in: path
            required: true
            description: Identifier of the university.
            schema:
                type: string
                format: uuid
        communityIdParam:
            name: communityId
            in: path
            required: true
            description: Identifier of the community.
            schema:
                type: string
                format: uuid
        groupIdParam:
            name: groupId
            in: path
            required: true
            description: Identifier of the group.
            schema:
                type: string
                format: uuid
        PostIdParam:
            name: postId
            in: path
            required: true
            description: Identifier of the post.
            schema:
                type: string
                format: uuid
        eventIdParam:
            name: eventId
            in: path
            required: true
            description: Identifier of the event.
            schema:
                type: string
                format: uuid
        pollIdParam:
            name: pollId
            in: path
            required: true
            description: Identifier of the poll.
            schema:
                type: string
                format: uuid
        commentIdParam:
            name: commentId
            in: path
            required: true
            description: Identifier of the comment.
            schema:
                type: string
                format: uuid
        notificationIdParam:
            name: notificationId
            in: path
            required: true
            description: Identifier of the notification.
            schema:
                type: string
                format: uuid
        educationIdParam:
            name: educationId
            in: path
            required: true
            description: Identifier of the education entry.
            schema:
                type: string
                format: uuid
        achievementIdParam:
            name: achievementId
            in: path
            required: true
            description: Identifier of the achievement entry.
            schema:
                type: string
                format: uuid
        connectionRequestIdParam:
            name: requestId
            in: path
            required: true
            description: Identifier of the connection request.
            schema:
                type: string
                format: uuid

        # Query Parameters
        pageParam:
            name: page
            in: query
            description: Page number for pagination.
            schema:
                type: integer
                default: 1
                minimum: 1
        limitParam: # Number of items per page.
            name: limit
            in: query
            description: Maximum number of items to return per page (max 100).
            schema:
                type: integer
                default: 10
                minimum: 1
                maximum: 100
        searchQueryParam:
            name: search
            in: query
            description: Search term.
            schema:
                type: string
                minLength: 1
            example: "hackathon"
        tagQueryParam:
            name: tag
            in: query
            description: Filter by tag name.
            schema:
                type: string
            example: "programming"
        tagsQueryParam:
            name: tags[] # For multiple tags
            in: query
            description: Filter results by one or more tag names.
            required: false
            style: form
            explode: true
            schema:
                type: array
                items:
                    type: string
                maxItems: 5
            example: [ "programming", "contest" ]

    schemas:
        # ----------------------
        # ENUMERATIONS
        # ----------------------
        UserRoleEnum:
            type: string
            enum: [student, alumni, admin]
        EduLevelEnum:
            type: string
            enum: ["SSC/O-Level", "HSC/A-Level", "Undergrade", "Postgrad"]
        CommunityRoleEnum:
            type: string
            enum: [admin, moderator, member]
        PostStatusEnum:
            type: string
            enum: [pending, approved, rejected]
        EventStatusEnum:
            type: string
            enum: [upcoming, ongoing, completed, cancelled]
        ConnectionStatusEnum:
            type: string
            enum: [pending, accepted, rejected, blocked]
        ReactionTypeEnum:
            type: string
            enum: [like, love, laugh, sad, angry]
        NotificationTypeEnum:
            type: string
            enum:
                [
                    post_approved,
                    post_rejected,
                    post_comment,
                    post_reaction,
                    comment_reaction,
                    connection_accepted,
                    connection_rejected,
                    event_reminder,
                    connection_request,
                ]
        RelatedEntityTypeName:
            type: string
            enum: [post, event, user, comment]

        # Common Error Structure
        ErrorResponse:
            type: object
            description: Standard API error response structure.
            properties:
                error:
                    type: string
                    description: A unique, machine-readable error type.
                    example: "validation_error"
                code:
                    type: integer
                    description: A unique, machine-readable error code
                    example: 401
                message:
                    type: string
                    description: A human-readable summary of the error.
                    example: "The request data failed validation."
                details: # Array of specific field errors
                    type: array
                    items:
                        type: object
                        properties:
                        field:
                            type: string
                            description: The specific field that caused the validation error.
                            example: "email"
                        message:
                            type: string
                            description: A detailed message about the error on this field.
                            example: "Email address is already in use."
                    nullable: true # Details might not always be present
                    example:
                        - field: "password"
                          message: "Password must be at least 8 characters long."
                        - field: "username"
                          message: "Username can only contain alphanumeric characters and underscores."
                timestamp:
                    type: string
                    format: date-time
                    description: The date and time (ISO 8601 UTC) when the error occurred.
                    example: "2024-05-30T14:30:00Z"
            required:
                - error
                - code
                - message
                - timestamp

        University:
            type: object
            description: Represents an academic institution within CampusNet.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "223e4567-e89b-12d3-a456-426614174000"
                name:
                    type: string
                    minLength: 3
                    maxLength: 255
                    description: Official name of the university.
                    example: "Metropolitan University of Technology"
                domain:
                    type: string
                    maxLength: 100
                    pattern: '^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'
                    description: Official email domain of the university (e.g., 'mtech.edu'). Used for user verification.
                    example: "mtech.edu"
                location:
                    type: string
                    maxLength: 255
                    nullable: true
                    description: Physical location of the university (e.g., City, Country).
                    example: "Techville, Innovaland"
                establishedYear:
                    type: integer
                    nullable: true
                    description: Year the university was established.
                    example: 1985
                description:
                    type: string
                    maxLength: 2000
                    nullable: true
                    description: A brief description or mission statement of the university.
                    example: "A leading institution for science, engineering, and arts, fostering innovation and excellence."
                logoUrl:
                    type: string
                    format: uri
                    nullable: true
                    description: URL to the university's official logo.
                    example: "https://storage.campusnet.app/logos/uni_223e4567.png"
                websiteUrl: # Added common field
                    type: string
                    format: uri
                    nullable: true
                    description: URL to the university's official website.
                    example: "https://www.mtech.edu"
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2020-01-01T00:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2023-06-15T10:00:00Z"
            required:
                - id
                - name
                - domain
                - establishedYear
                - websiteUrl
                - createdAt

        User:
            type: object
            description: Detailed representation of a user account.
            properties:
            id:
                type: string
                format: uuid
                description: Unique identifier for the user.
                example: "123e4567-e89b-12d3-a456-426614174000"
                readOnly: true
            email:
                type: string
                format: email
                description: User's primary email address (used for login and notifications).
                example: "jane.doe@university.edu"
            username:
                type: string
                description: Unique username for the user.
                minLength: 3
                maxLength: 30
                pattern: "^[a-zA-Z0-9_.-]+$"
                example: "jane.doe_23"
            role:
                $ref: "#/components/schemas/UserRoleEnum"
            isVerified:
                type: boolean
                description: Indicates if the user's email address has been verified.
                default: false
                example: true
            isActive:
                type: boolean
                description: Indicates if the user account is currently active or disabled.
                default: true
                example: true
            universityId:
                type: string
                format: uuid
                description: Identifier of the university the user is primarily associated with.
                nullable: true
                example: "223e4567-e89b-12d3-a456-426614174000"
            lastLoginAt:
                type: string
                format: date-time
                description: Timestamp of the user's last successful login.
                nullable: true
                readOnly: true
                example: "2024-05-29T10:30:00Z"
            createdAt:
                type: string
                format: date-time
                description: Timestamp of when the user account was created.
                readOnly: true
                example: "2024-01-15T09:30:00Z"
            updatedAt:
                type: string
                format: date-time
                description: Timestamp of when the user account was last updated.
                readOnly: true
                example: "2024-05-15T11:00:00Z"
            required:
                - id
                - email
                - username
                - role
                - isVerified
                - isActive
                - createdAt
                - updatedAt

        UserProfile:
            type: object
            description: Comprehensive profile information for a user.
            properties:
            userId:
                type: string
                format: uuid
                description: The unique identifier of the user this profile belongs to.
                example: "123e4567-e89b-12d3-a456-426614174000"
                readOnly: true
            firstName:
                type: string
                minLength: 1
                maxLength: 50
                description: User's first name.
                example: "Jane"
            lastName:
                type: string
                minLength: 1
                maxLength: 50
                description: User's last name.
                example: "Doe"
            avatarUrl:
                type: string
                format: uri
                nullable: true
                description: URL to the user's profile picture.
                example: "https://storage.campusnet.app/avatars/usr_123e4567.png"
            coverPhotoUrl:
                type: string
                format: uri
                nullable: true
                description: URL to the user's profile cover photo.
                example: "https://storage.campusnet.app/covers/usr_123e4567.jpg"
            bio:
                type: string
                maxLength: 500
                nullable: true
                description: A short biography or description about the user.
                example: "Computer Science enthusiast, passionate about open source and AI. Third year student at University of Technology."
            birthDate:
                type: string
                format: date
                nullable: true
                description: User's date of birth (YYYY-MM-DD). Privacy settings may apply.
                example: "2002-08-15"
            phone:
                type: string
                maxLength: 20
                nullable: true
                pattern: '^\+?[1-9]\d{1,14}$'
                description: User's phone number. Privacy settings apply.
                example: "+11234567890"
            studentId:
                type: string
                maxLength: 50
                nullable: true
                description: User's official student identifier, if applicable.
                example: "STU-2022-00123"
            department:
                type: string
                maxLength: 100
                nullable: true
                description: User's academic department.
                example: "Dept. of Computer Science & Engineering"
            graduationYear:
                type: integer
                nullable: true
                description: User's expected or actual year of graduation.
                example: 2025
            interests:
                type: array
                items:
                    type: string
                    minLength: 1
                    maxLength: 50
                    maxItems: 15
                    nullable: true
                description: A list of user's interests or hobbies.
                example: ["AI", "Web Development", "Hiking", "Photography"]
            address:
                type: string
                maxLength: 255
                nullable: true
                description: User's physical address (city, country, etc.)
                example: "123 University Ave, Tech City, TC 54321"
            required:
                - userId
                - firstName
                - lastName

        UserWithProfile:
            allOf:
                - $ref: "#/components/schemas/User"
                - type: object
                  properties:
                      profile:
                          $ref: "#/components/schemas/UserProfile"

        Education:
            type: object
            description: Represents an educational qualification or period of study for a user.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "a23e4567-e89b-12d3-a456-426614174000"
                userId:
                    type: string
                    format: uuid
                    description: Identifier of the user this education entry belongs to.
                    example: "123e4567-e89b-12d3-a456-426614174000"
                level:
                    $ref: "#/components/schemas/EduLevelEnum"
                institution:
                    type: string
                    maxLength: 255
                    description: Name of the educational institution.
                    example: "University of Technology"
                degree:
                    type: string
                    maxLength: 100
                    nullable: true
                    description: Name of the degree obtained or being pursued (e.g., B.Sc., M.A.).
                    example: "Bachelor of Science"
                fieldOfStudy:
                    type: string
                    maxLength: 100
                    nullable: true
                    description: Major or field of study.
                    example: "Computer Science"
                startDate:
                    type: string
                    format: date
                    nullable: true
                    description: Start date of the study period (YYYY-MM-DD).
                    example: "2021-09-01"
                endDate:
                    type: string
                    format: date
                    nullable: true
                    description: End date of the study period or expected graduation date (YYYY-MM-DD).
                    example: "2025-06-30"
            required:
                - id
                - userId
                - level
                - institutionName

        Achievement:
            type: object
            description: Represents a user's achievement, award, or certification.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "b23e4567-e89b-12d3-a456-426614174000"
                userId:
                    type: string
                    format: uuid
                    description: Identifier of the user this achievement belongs to.
                    example: "123e4567-e89b-12d3-a456-426614174000"
                title:
                    type: string
                    maxLength: 255
                    description: Title of the achievement or award.
                    example: "Winner - National Programming Contest 2023"
                issuedBy:
                    type: string
                    maxLength: 255
                    nullable: true
                    description: Organization or entity that issued the achievement.
                    example: "National Coding Society"
                achieved_at:
                    type: string
                    format: date
                    nullable: true
                    description: Date when the achievement was issued or earned (YYYY-MM-DD).
                    example: "2023-11-20"
                description:
                    type: string
                    nullable: true
                    description: Detailed description of the achievement.
                    example: "Secured first place among 500 participants in a 24-hour coding competition focused on algorithmic problem-solving."
            required:
                - id
                - userId
                - title
                - issuedBy
                - achieved_at

        Community:
            type: object
            description: Represents a university-wide community (e.g., the main community for a university).
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "323e4567-e89b-12d3-a456-426614174000"
                universityId:
                    type: string
                    format: uuid
                    description: Identifier of the university this community belongs to.
                    example: "223e4567-e89b-12d3-a456-426614174000"
                name:
                    type: string
                    minLength: 3
                    maxLength: 255
                    description: Name of the community. Often reflects the university name.
                    example: "MTech University Hub"
                description:
                    type: string
                    maxLength: 1000
                    nullable: true
                    description: Description of the community and its purpose.
                    example: "The central place for all students, faculty, and alumni of Metropolitan University of Technology to connect, share news, and find events."
                logoUrl:
                    type: string
                    format: uri
                    nullable: true
                    description: URL for the community's logo.
                    example: "https://storage.campusnet.app/communities/com_323e4567_logo.png"
                coverPhotoUrl:
                    type: string
                    format: uri
                    nullable: true
                    description: URL for the community's cover photo.
                    example: "https://storage.campusnet.app/communities/com_323e4567_cover.jpg"
                isPublic:
                    type: boolean
                    description: Indicates if community content (posts, events) is visible to users outside the university (if inter-university features are enabled).
                    default: false # Typically, main university communities are restricted to their members
                    example: true
                memberCount:
                    type: integer
                    minimum: 0
                    readOnly: true
                    description: Total number of members in this community.
                    example: 12500
                createdBy: # User who initiated/admin who set up
                    type: string
                    format: uuid
                    readOnly: true
                    description: Identifier of the user (typically an admin) who created the community.
                    example: "usr_admin_system_id_example"
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2022-06-01T10:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-01-20T15:30:00Z"
            required:
                - id
                - universityId
                - name
                - createdBy
                - createdAt

        CommunityMember:
            type: object
            description: Represents a user's membership in a community.
            properties:
                user:
                    $ref: "#/components/schemas/User"
                communityId:
                    type: string
                    format: uuid
                    example: "323e4567-e89b-12d3-a456-426614174000"
                role:
                    $ref: "#/components/schemas/CommunityRoleEnum"
                joinedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2022-08-10T14:20:00Z"
            required:
                - user
                - communityId
                - role

        Group:
            type: object
            description: Represents a student-led group or club within a community.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "423e4567-e89b-12d3-a456-426614174000"
                communityId:
                    type: string
                    format: uuid
                    description: Identifier of the parent community this group belongs to.
                    example: "323e4567-e89b-12d3-a456-426614174000"
                name:
                    type: string
                    minLength: 3
                    maxLength: 255
                    description: Name of the group.
                    example: "AI Enthusiasts Club"
                description:
                    type: string
                    maxLength: 2000
                    nullable: true
                    description: Detailed description of the group, its mission, and activities.
                    example: "A club for students passionate about Artificial Intelligence. We host weekly discussions, workshops, and guest speaker sessions."
                logoUrl:
                    type: string
                    format: uri
                    nullable: true
                    description: URL for the group's logo.
                    example: "https://storage.campusnet.app/groups/grp_423e4567_logo.png"
                coverPhotoUrl:
                    type: string
                    format: uri
                    nullable: true
                    description: URL for the group's cover photo.
                    example: "https://storage.campusnet.app/groups/grp_423e4567_cover.jpg"
                isPublic:
                    type: boolean
                    description: If true, the group is visible to all community members. If false, it might be invite-only or hidden.
                    default: true
                    example: true
                memberApprovalRequired:
                    type: boolean
                    description: If true, new members require approval from group admins/moderators to join.
                    default: false
                    example: false
                postApprovalRequired:
                    type: boolean
                    description: If true, posts made within the group require approval from group admins/moderators before becoming visible.
                    default: false
                    example: false
                rules: # From original schema
                    type: string
                    maxLength: 5000 # Generous space for rules
                    nullable: true
                    description: Rules and guidelines for group members.
                    example: "1. Be respectful to all members.\n2. Keep discussions relevant to AI.\n3. No spam or self-promotion without approval."
                memberCount:
                    type: integer
                    minimum: 0
                    readOnly: true
                    description: Total number of members in this group.
                    example: 75
                createdBy:
                    type: string
                    format: uuid
                    readOnly: true
                    description: Identifier of the user who created the group.
                    example: "123e4567-e89b-12d3-a456-426614174000"
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2023-09-01T11:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-03-10T18:45:00Z"
            required:
                - id
                - communityId
                - name
                - createdBy
                - createdAt

        GroupMember:
            type: object
            description: Represents a user's membership in a group.
            properties:
                user:
                    $ref: "#/components/schemas/User"
                groupId:
                    type: string
                    format: uuid
                    example: "423e4567-e89b-12d3-a456-426614174000"
                role:
                    $ref: "#/components/schemas/CommunityRoleEnum" # Reusing for group roles
                joinedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2023-09-05T10:00:00Z"
            required:
                - user
                - groupId
                - role

        Tag:
            type: object
            description: Represents a tag used for categorizing content like posts and events.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "abc123e4-e89b-12d3-a456-426614174000"
                name:
                    type: string
                    minLength: 1
                    maxLength: 50
                    pattern: '^[a-zA-Z0-9-#]+$' # Allow letters, numbers, hyphens, hash
                    description: The tag name. Should be unique (case-insensitive).
                    example: "artificial-intelligence"
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: Tag creation time
            required:
                - id
                - name

        Post:
            type: object
            description: Represents a user-generated post, announcement, or piece of news.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "523e4567-e89b-12d3-a456-426614174000"
                author:
                    $ref: '#/components/schemas/User'
                communityId:
                    type: string
                    format: uuid
                    nullable: true
                    description: Identifier of the community this post belongs to (if not in a group).
                    example: "323e4567-e89b-12d3-a456-426614174000"
                groupId:
                    type: string
                    format: uuid
                    nullable: true
                    description: Identifier of the group this post belongs to.
                    example: "423e4567-e89b-12d3-a456-426614174000"
                content:
                    type: string
                    minLength: 1
                    maxLength: 10000
                    description: Main textual content of the post. Can support markdown.
                    example: "Hello everyone! We're looking for volunteers for our annual charity drive. Please sign up here: [link]"
                images:
                    type: array
                    items:
                        type: string
                        format: uri
                        description: URL of the image.
                        example: "https://storage.campusnet.app/posts/pst_523e4567/image1.jpg"
                    maxItems: 10
                    nullable: true
                    description: List of images attached to the post.
                links:
                    type: array
                    items:
                        type: string
                        format: uri
                        example: "https://example.com/relevant-article"
                    maxItems: 5
                    nullable: true
                    description: List of external links shared in the post.
                tags:
                    type: array
                    items:
                        $ref: '#/components/schemas/Tag'
                    maxItems: 10
                    nullable: true
                    description: Tags associated with the post for categorization and discovery.
                status:
                    $ref: '#/components/schemas/PostStatusEnum'
                isPublic:
                    type: boolean
                    description: If true, this post might be visible across different campuses (inter-university feed), subject to system configuration.
                    default: false
                    example: true
                isPinned:
                    type: boolean
                    description: If true, this post is pinned to the top of its community/group feed.
                    default: false
                    example: false
                isFeatured:
                    type: boolean
                    description: If true, this post is highlighted or featured by moderators.
                    default: false
                    example: false
                viewCount:
                    type: integer
                    minimum: 0
                    readOnly: true
                    example: 1250
                reactionCount:
                    type: integer
                    minimum: 0
                    readOnly: true
                    example: 75
                commentCount:
                    type: integer
                    minimum: 0
                    readOnly: true
                    example: 12
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-02-15T14:30:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-02-16T09:15:00Z"
            required:
                - id
                - author
                - communityId
                - groupId
                - content
                - status
                - createdAt
                - updatedAt

        Event:
            type: object
            description: Represents a campus event, workshop, meeting, or activity.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "evt_623e4567-e89b-12d3-a456-426614174000"
                organizer:
                    $ref: '#/components/schemas/User'
                communityId:
                    type: string
                    format: uuid
                    nullable: true
                    description: Identifier of the community hosting this event.
                    example: "323e4567-e89b-12d3-a456-426614174000"
                groupId:
                    type: string
                    format: uuid
                    nullable: true
                    description: Identifier of the group hosting this event.
                    example: "423e4567-e89b-12d3-a456-426614174000"
                title:
                    type: string
                    minLength: 3
                    maxLength: 150 # Slightly longer than user example
                    description: Title of the event.
                    example: "Annual Campus Tech Symposium 2024"
                description:
                    type: string
                    maxLength: 5000 # More space for event details
                    nullable: true
                    description: Detailed description of the event, including agenda, speakers, etc. Can support markdown.
                    example: "Join us for three days of insightful talks, hands-on workshops, and networking opportunities with leaders in the tech industry. Keynote by Dr. Quantum Entanglement."
                startDate:
                    type: string
                    format: date-time # Full timestamp
                    description: Start date and time of the event.
                    example: "2024-10-22T09:00:00Z"
                endDate:
                    type: string
                    format: date-time # Full timestamp
                    nullable: true # Optional for single-day or instantaneous events
                    description: End date and time of the event.
                    example: "2024-10-24T17:00:00Z"
                location:
                    type: string
                    maxLength: 255
                    nullable: true
                    description: Physical location of the event (e.g., Room, Building, Address).
                    example: "Grand Auditorium, Innovation Hall, 1 Tech Park Drive"
                isOnline:
                    type: boolean
                    description: Indicates if the event is hosted online.
                    default: false
                    example: false
                onlineEventUrl:
                    type: string
                    format: uri
                    nullable: true
                    description: URL for joining the online event (e.g., Zoom, Teams link).
                    example: "https://zoom.us/j/1234567890"
                venueDetails:
                    type: string
                    maxLength: 500
                    nullable: true
                    description: Additional details about the venue, like parking or accessibility.
                    example: "Parking available in Lot C. Main entrance is wheelchair accessible."
                coverImageUrl:
                    type: string
                    format: uri
                    nullable: true
                    description: URL for the event's cover image or banner.
                    example: "https://storage.campusnet.app/events/evt_623e4567_cover.jpg"
                tags:
                    type: array
                    items:
                        $ref: '#/components/schemas/Tag'
                    maxItems: 10
                    nullable: true
                status:
                    $ref: '#/components/schemas/EventStatusEnum'
                isPublic:
                    type: boolean
                    description: If true, this event might be visible across campuses or to the public, depending on system settings.
                    default: true
                    example: true
                maxAttendees:
                    type: integer
                    minimum: 1
                    nullable: true
                    description: Maximum number of attendees allowed. Null for unlimited.
                    example: 200
                attendeeCount:
                    type: integer
                    minimum: 0
                    readOnly: true
                    description: Number of users confirmed as 'attending'.
                    example: 115
                interestedCount: # From original schema
                    type: integer
                    minimum: 0
                    readOnly: true
                    description: Number of users marked as 'interested'.
                    example: 45
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-04-01T10:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-05-15T16:30:00Z"
            required:
                - id
                - organizer
                - title
                - description
                - startDate
                - endDate
                - status
                - createdAt

        EventAttendee:
            type: object
            description: Represents a user's attendance status for an event.
            properties:
                user:
                    $ref: '#/components/schemas/User'
                eventId:
                    type: string
                    format: uuid
                    example: "evt_623e4567-e89b-12d3-a456-426614174000"
                status:
                    type: string
                    enum: [ attending, interested ]
                    description: User's RSVP status for the event.
                    example: "attending"
                joinedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: Timestamp when the user registered their status.
                    example: "2024-04-10T11:00:00Z"
            required:
                - user
                - eventId
                - status
                - joinedAt

        PollOption:
            type: object
            description: An option within a poll that users can vote for.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "1a2b3c4d-e89b-12d3-a456-426614174000"
                pollId:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "1a2b3c4d-e89b-12d3-a456-426614174000"
                optionText:
                    type: string
                    minLength: 1
                    maxLength: 255
                    description: The text content of the poll option.
                    example: "Spring Semester Break"
                voteCount:
                    type: integer
                    minimum: 0
                    readOnly: true
                    description: Number of votes received by this option. (Only visible when results are public).
                    example: 42
            required:
                - id
                - pollId
                - text

        Poll:
            type: object
            description: Represents a poll for gathering opinions or making decisions.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    example: "723e4567-e89b-12d3-a456-426614174000"
                creator:
                    $ref: '#/components/schemas/User'
                communityId:
                    type: string
                    format: uuid
                    nullable: true
                    example: "com_323e4567-e89b-12d3-a456-426614174000"
                groupId:
                    type: string
                    format: uuid
                    nullable: true
                    example: "grp_423e4567-e89b-12d3-a456-426614174000"
                question:
                    type: string
                    minLength: 1
                    description: The main question of the poll.
                    example: "When should we schedule the next club meeting?"
                description:
                    type: string
                    maxLength: 1000
                    nullable: true
                    description: Additional context or description for the poll.
                    example: "Please vote for your preferred day. The meeting will cover planning for the upcoming semester."
                options:
                    type: array
                    items:
                        $ref: '#/components/schemas/PollOption'
                    minItems: 2
                    maxItems: 10 
                    description: List of options users can vote for.
                deadline:
                    type: string
                    format: date-time
                    nullable: true
                    description: Timestamp when voting for the poll ends. Null for no deadline.
                    example: "2024-06-10T23:59:59Z"
                isPublic:
                    type: boolean
                    default: true
                allowMultipleVotes:
                    type: boolean
                    description: If true, users can select multiple options.
                    default: false
                    example: false
                showResultsBeforeDeadline:
                    type: boolean
                    description: If true, results are visible to voters before the deadline. Otherwise, only after the deadline or if the creator makes them public.
                    default: false
                    example: true
                status:
                    $ref: '#/components/schemas/PostStatusEnum'
                    description: Approval status if polls require moderation.
                totalVotes:
                    type: integer
                    minimum: 0
                    readOnly: true
                    description: Total number of votes cast in this poll.
                    example: 150
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-06-01T09:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-06-01T09:00:00Z"
            required:
                - id
                - creator
                - question
                - options
                - status
                - createdAt
        
        PollVote:
            type: object
            description: Records a user's vote on a specific poll option.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    description: Unique identifier for the vote record.
                    example: "a1b2c3d4-e89b-12d3-a456-426614174000"
                pollId:
                    type: string
                    format: uuid
                    description: Identifier of the poll this vote belongs to.
                    example: "723e4567-e89b-12d3-a456-426614174000"
                userId:
                    type: string
                    format: uuid
                    description: Identifier of the user who cast the vote.
                    example: "123e4567-e89b-12d3-a456-426614174000"
                pollOptionId:
                    type: string
                    format: uuid
                    description: Identifier of the poll option selected by the user.
                    example: "1a2b3c4d-e89b-12d3-a456-426614174000"
                votedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: Timestamp when the vote was cast.
                    example: "2024-06-02T10:30:00Z"
            required:
                - id
                - pollId
                - userId
                - pollOptionId
                - votedAt
        
        Comment:
            type: object
            description: Represents a comment made by a user on a post or event.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    description: Unique identifier for the comment.
                    example: "823e4567-e89b-12d3-a456-426614174000"
                author:
                    $ref: '#/components/schemas/User' 
                postId:
                    type: string
                    format: uuid
                    nullable: true
                    description: Identifier of the post this comment belongs to (if applicable).
                    example: "523e4567-e89b-12d3-a456-426614174000"
                eventId:
                    type: string
                    format: uuid
                    nullable: true
                    description: Identifier of the event this comment belongs to (if applicable).
                    example: "623e4567-e89b-12d3-a456-426614174000"
                parentId:
                    type: string
                    format: uuid
                    nullable: true
                    description: Identifier of the parent comment if this is a reply.
                    example: "parent_comment_id_example"
                content:
                    type: string
                    minLength: 1
                    maxLength: 2000 
                    description: The textual content of the comment. Can support limited markdown.
                    example: "Great post! I totally agree with your points."
                likeCount: 
                    type: integer
                    minimum: 0
                    default: 0
                    readOnly: true
                    example: 15
                replies:
                    type: array
                    items:
                        $ref: '#/components/schemas/Comment' 
                    nullable: true
                    description: A list of replies to this comment.
                    readOnly: true # Replies are typically fetched as part of the comment or via a separate endpoint
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-02-15T15:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    example: "2024-02-15T15:05:00Z"
            required:
                - id
                - author
                - content
                - createdAt
                # postId or eventId should be conditionally required based on context,
                # but OpenAPI doesn't easily support this. Backend validation is key.
        
        Reaction:
        type: object
        description: Represents a reaction (e.g., like, love) from a user to a post or comment.
        properties:
            id:
                type: string
                format: uuid
                readOnly: true
                description: Unique identifier for the reaction.
                example: "def456a1-e89b-12d3-a456-426614174000"
            user:
                $ref: '#/components/schemas/User'
            postId:
                type: string
                format: uuid
                nullable: true
                description: Identifier of the post being reacted to (if applicable).
                example: "pst_523e4567-e89b-12d3-a456-426614174000"
            commentId:
                type: string
                format: uuid
                nullable: true
                description: Identifier of the comment being reacted to (if applicable).
                example: "cmt_823e4567-e89b-12d3-a456-426614174000"
            reactionType:
                $ref: '#/components/schemas/ReactionTypeEnum'
            createdAt:
                type: string
                format: date-time
                readOnly: true
                example: "2024-02-15T15:10:00Z"
        required:
            - id
            - user
            - reactionType
            - createdAt
            # postId or commentId should be conditionally required.

        UserConnection:
            type: object
            description: Represents a connection or relationship between two users.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    description: Unique identifier for the connection record.
                    example: "con_f1e2d3c4-b89b-12d3-a456-426614174000"
                requester: # User who initiated the connection
                    $ref: '#/components/schemas/User'
                recipient: # User who received the connection request
                    $ref: '#/components/schemas/User'
                status:
                    $ref: '#/components/schemas/ConnectionStatusEnum'
                requestedAt: # When the request was made
                    type: string
                    format: date-time
                    readOnly: true
                    description: Timestamp when the connection request was initiated.
                    example: "2024-05-01T12:00:00Z"
                updatedAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: Timestamp of the last update to the connection status.
                    example: "2024-05-01T14:30:00Z"
            required:
                - id
                - requester
                - recipient
                - status
                - requestedAt

        Message:
            type: object
            description: Represents a direct message sent between two users.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    description: Unique identifier for the message.
                    example: "msg_c4d3e2b1-a89b-12d3-a456-426614174000"
                sender:
                    $ref: '#/components/schemas/User' # User who sent the message
                recipient:
                    $ref: '#/components/schemas/User' # User who received the message
                content:
                    type: string
                    minLength: 1
                    maxLength: 5000 # Max length for a direct message
                    description: The textual content of the message.
                    example: "Hey, are you going to the tech talk on Friday?"
                isRead:
                    type: boolean
                    default: false
                    description: Indicates if the recipient has read the message.
                    example: false
                sentAt: 
                    type: string
                    format: date-time
                    readOnly: true
                    description: Timestamp when the message was sent.
                    example: "2024-05-20T10:00:00Z"
            required:
                - id
                - sender
                - recipient
                - content
                - sentAt
        
        Conversation:
            type: object
            description: Represents a summary of a direct message conversation with another user.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    description: Unique identifier for the conversation.
                    example: "c4d3e2b1-a89b-12d3-a456-426614174000"
                withUser: 
                    $ref: '#/components/schemas/User'
                lastMessage:
                    $ref: '#/components/schemas/Message' # The most recent message in the conversation
                    nullable: true # Could be a new conversation with no messages yet
                unreadCount:
                    type: integer
                    minimum: 0
                    description: Number of unread messages from `withUser` for the authenticated user.
                    example: 3
                lastActivityAt: # Timestamp of the last message
                    type: string
                    format: date-time
                    readOnly: true
                    description: Timestamp of the last activity (last message sent) in this conversation.
                    example: "2024-05-28T15:30:00Z"
                createdAt:
                    type: string
                    format: date-time
                    description: Time when first conversation started
                    example: "2024-05-28T15:30:00Z"
            required:
                - id
                - withUser
                - unreadCount
                - lastActivityAt

        Notification:
            type: object
            description: Represents a notification for a user about an activity or event.
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                    description: Unique identifier for the notification.
                    example: "923e4567-e89b-12d3-a456-426614174000"
                userId: 
                    type: string
                    format: uuid
                    description: Identifier of the user who is the recipient of this notification.
                    example: "123e4567-e89b-12d3-a456-426614174000"
                type:
                    $ref: '#/components/schemas/NotificationTypeEnum'
                sender: # User who triggered the notification, if applicable
                    $ref: '#/components/schemas/User'
                    nullable: true # Some notifications might be system-generated
                content:
                    type: string
                    maxLength: 500
                    description: The main text content of the notification.
                    example: "John Doe commented on your post: 'Annual Tech Symposium 2024'."
                relatedEntityId:
                    type: string
                    format: uuid
                    nullable: true
                    description: Identifier of the entity this notification is related to (e.g., post ID, event ID, user ID of sender).
                    example: "523e4567-e89b-12d3-a456-426614174000"
                relatedEntityType:
                    $ref: '#/components/schemas/RelatedEntityTypeName'
                    nullable: true
                isRead:
                    type: boolean
                    default: false
                    description: Indicates if the recipient has read the notification.
                    example: false
                createdAt:
                    type: string
                    format: date-time
                    readOnly: true
                    description: Timestamp when the notification was created.
                    example: "2024-05-25T11:00:00Z"
            required:
                - id
                - recipientId
                - type
                - content
                - relatedEntityId
                - relatedEntityType
        
        PaginationMetadata:
            type: object
            description: Metadata for paginated API responses.
            properties:
                totalItems:
                    type: integer
                    format: int32
                    description: Total number of items available across all pages.
                    example: 127
                itemCount: # How many items in the current page's data array
                    type: integer
                    format: int32
                    description: Number of items returned in the current page.
                    example: 20
                itemsPerPage:
                    type: integer
                    format: int32
                    description: The number of items requested per page.
                    example: 20
                totalPages:
                    type: integer
                    format: int32
                    description: Total number of pages available.
                    example: 7
                currentPage:
                    type: integer
                    format: int32
                    description: The current page number (1-based index).
                    example: 1
            required:
                - totalItems
                - itemCount
                - itemsPerPage
                - totalPages
                - currentPage

        SuccessMessageResponse:
            type: object
            description: Generic success response with a message.
            properties:
                message:
                    type: string
                    example: "Operation completed successfully."
                data: # Changed to object as per user's example for AuthToken response
                    type: array
                    items:
                        type: object
                        nullable: true
                        additionalProperties: true # Allows for flexible data payload
                    example: [
                        {
                            id: "res_some_resource_id",
                            status: "updated"
                        }
                    ]
            required:
                - message
                - data

        AuthToken: 
            type: object
            description: Represents the JWT access and refresh tokens.
            properties:
                accessToken:
                    type: string
                    description: JWT access token used for authorizing API requests.
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c3JfMTIzZTQ1NjciLCJyb2xlIjoic3R1ZGVudCIsImV4cCI6MTcxNzEwNzQwMH0.example_access_token_signature"
                refreshToken:
                    type: string
                    description: Token used to obtain a new access token when the current one expires. Store securely.
                    nullable: true # Refresh token might not always be issued or might be httpOnly cookie
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c3JfMTIzZTQ1NjciLCJzY29wZSI6InJlZnJlc2giLCJleHAiOjE3MTk3MDQwMDB9.example_refresh_token_signature"
                expiresIn:
                    type: integer
                    description: The validity duration of the access token in seconds from the time of issuance.
                    example: 3600
                tokenType:
                    type: string
                    description: Type of the token, typically "Bearer".
                    example: "Bearer"
            required:
                - accessToken
                - expiresIn
                - tokenType
                
        AuthenticatedUserResponse: # For login/register responses
            type: object
            description: Response payload after successful authentication or registration.
            properties:
                tokens:
                    $ref: '#/components/schemas/AuthToken'
                user:
                    $ref: '#/components/schemas/User'
            required:
                - tokens
                - user

        AuthRegisterRequest:
            type: object
            description: Information required for new user registration.
            properties:
                firstName:
                    type: string
                    minLength: 1
                    maxLength: 50
                    description: User's first name.
                    example: "Sarah"
                lastName:
                    type: string
                    minLength: 1
                    maxLength: 50
                    description: User's last name.
                    example: "Connor"
                username:
                    type: string
                    minLength: 3
                    maxLength: 30
                    pattern: '^[a-zA-Z0-9_.-]+$'
                    description: Desired unique username.
                    example: "sarah.connor88"
                email:
                    type: string
                    format: email
                    description: User's email address for registration and communication. Must be unique.
                    example: "sarah.connor@mtech.edu"
                password:
                    type: string
                    format: password
                    minLength: 8
                    maxLength: 100
                    description: User's chosen password. Should meet complexity requirements.
                    # pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$' # Example strong password pattern
                    example: "FutureSecure123!"
                confirm-password:
                    type: string
                    format: password
                    minLength: 8
                    maxLength: 100
                    description: User's chosen password confirmation. Should match the password previously entered.
                    # pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$' # Example strong password pattern
                    example: "FutureSecure123!"
            required:
                - firstName
                - lastName
                - username
                - email
                - password
                - confirm-password

        AuthLoginRequest:
            type: object
            description: Credentials for user login.
            properties:
                email:
                    type: string
                    format: email
                    description: User's registered email address.
                    example: "jane.doe@university.edu"
                password:
                    type: string
                    format: password
                    minLength: 8
                    description: User's password.
                    example: "Password123!"
            required:
                - email
                - password

        AuthTokenResponse:
            type: object
            properties:
                accessToken:
                    type: string
                refreshToken:
                    type: string
                    nullable: true # Depending on your refresh token strategy
                user:
                    $ref: "#/components/schemas/User"

        VerifyEmailRequest:
            type: object
            properties:
                token:
                    type: string
            required:
                - token

        ResendVerificationEmailRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
            required:
                - email

        ForgotPasswordRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
            required:
                - email

        ResetPasswordRequest:
            type: object
            properties:
                token:
                    type: string
                newPassword:
                    type: string
                    format: password
                    minLength: 8
            required:
                - token
                - newPassword

        RefreshTokenRequest:
            type: object
            properties:
                refreshToken:
                    type: string
            required:
                - refreshToken

        UserUpdateRequest:
            type: object
            properties:
                username:
                    type: string
                    maxLength: 50
                email:
                    type: string
                    format: email # Might require re-verification

        ChangePasswordRequest:
            type: object
            properties:
                currentPassword:
                    type: string
                    format: password
                newPassword:
                    type: string
                    format: password
                    minLength: 8
            required:
                - currentPassword
                - newPassword

        UserProfileUpdateRequest:
            type: object
            properties:
                firstName:
                    type: string
                    maxLength: 100
                lastName:
                    type: string
                    maxLength: 100
                profilePicture:
                    type: string
                    format: url
                    nullable: true
                coverPhoto:
                    type: string
                    format: url
                    nullable: true
                bio:
                    type: string
                    format: text
                    nullable: true
                birthDate:
                    type: string
                    format: date
                    nullable: true
                phone:
                    type: string
                    maxLength: 20
                    nullable: true
                studentId:
                    type: string
                    maxLength: 50
                    nullable: true
                graduationYear:
                    type: integer
                    nullable: true
                department:
                    type: string
                    maxLength: 100
                    nullable: true
                interests:
                    type: array
                    items:
                        type: string
                    nullable: true
                address:
                    type: string
                    maxLength: 255
                    nullable: true
                profileVisibilityPublic:
                    type: boolean
                connectionVisibilityPublic:
                    type: boolean
                bloodGroup:
                    type: string
                    maxLength: 5
                    nullable: true

        EducationRequest:
            type: object
            properties:
                level:
                    $ref: "#/components/schemas/EduLevelEnum"
                institution:
                    type: string
                    maxLength: 255
                degree:
                    type: string
                    maxLength: 100
                    nullable: true
                fieldOfStudy:
                    type: string
                    maxLength: 100
                    nullable: true
                startDate:
                    type: string
                    format: date
                    nullable: true
                endDate:
                    type: string
                    format: date
                    nullable: true
            required:
                - level
                - institution

        AchievementRequest:
            type: object
            properties:
                title:
                    type: string
                    maxLength: 255
                issuedBy:
                    type: string
                    maxLength: 255
                    nullable: true
                description:
                    type: string
                    format: text
                    nullable: true
                achievedAt:
                    type: string
                    format: date
                    nullable: true
            required:
                - title

        UniversityRequest:
            type: object
            properties:
                name:
                    type: string
                    maxLength: 255
                domain:
                    type: string
                    maxLength: 100
                location:
                    type: string
                    maxLength: 255
                    nullable: true
                establishedYear:
                    type: integer
                    nullable: true
                description:
                    type: string
                    format: text
                    nullable: true
                logoUrl:
                    type: string
                    format: url
                    nullable: true
            required:
                - name
                - domain

        CommunityRequest:
            type: object
            properties:
                name:
                    type: string
                    maxLength: 255
                description:
                    type: string
                    format: text
                    nullable: true
                universityId: # Required if creating a new community directly
                    type: string
                    format: uuid
                coverImage:
                    type: string
                    format: url
                    nullable: true
                logo:
                    type: string
                    format: url
                    nullable: true
                isPublic:
                    type: boolean
                    default: true
            required:
                - name
                # universityId might be implicit if tied to university creation

        CommunityMemberRoleRequest:
            type: object
            properties:
                role:
                    $ref: "#/components/schemas/CommunityRoleEnum"
            required:
                - role

        GroupRequest:
            type: object
            properties:
                name:
                    type: string
                    maxLength: 255
                description:
                    type: string
                    format: text
                    nullable: true
                rules:
                    type: string
                    format: text
                    nullable: true
                coverImage:
                    type: string
                    format: url
                    nullable: true
                logo:
                    type: string
                    format: url
                    nullable: true
                isPublic:
                    type: boolean
                    default: true
                memberApprovalRequired:
                    type: boolean
                    default: false
                postApprovalRequired:
                    type: boolean
                    default: false
            required:
                - name

        GroupMemberRoleRequest:
            type: object
            properties:
                role:
                    $ref: "#/components/schemas/CommunityRoleEnum" # Using community role
            required:
                - role

        PostRequest:
            type: object
            properties:
                content:
                    type: string
                    format: text
                communityId:
                    type: string
                    format: uuid
                    nullable: true
                groupId:
                    type: string
                    format: uuid
                    nullable: true
                images:
                    type: array
                    items:
                        type: string
                        format: url
                    nullable: true
                links:
                    type: array
                    items:
                        type: string
                        format: url
                    nullable: true
                isPublic:
                    type: boolean
                    default: true
                tags: # Array of tag names or tag IDs
                    type: array
                    items:
                        type: string
                    nullable: true
            required:
                - content

        EventRequest:
            type: object
            properties:
                title:
                    type: string
                    maxLength: 255
                description:
                    type: string
                    format: text
                    nullable: true
                communityId:
                    type: string
                    format: uuid
                    nullable: true
                groupId:
                    type: string
                    format: uuid
                    nullable: true
                startDate:
                    type: string
                    format: date-time
                endDate:
                    type: string
                    format: date-time
                    nullable: true
                location:
                    type: string
                    maxLength: 255
                    nullable: true
                eventLink:
                    type: string
                    format: url
                    nullable: true
                venueDetails:
                    type: string
                    maxLength: 255
                    nullable: true
                maxAttendees:
                    type: integer
                    nullable: true
                isPublic:
                    type: boolean
                    default: true
                coverImage:
                    type: string
                    format: url
                    nullable: true
                tags: # Array of tag names or tag IDs
                    type: array
                    items:
                        type: string
                    nullable: true
            required:
                - title
                - startDate

        EventAttendeeStatusRequest:
            type: object
            properties:
                status:
                    type: string
                    enum: [interested, attending]
            required:
                - status

        PollOptionRequest:
            type: object
            properties:
                text:
                    type: string
                    maxLength: 255
            required:
                - text

        PollRequest:
            type: object
            properties:
                question:
                    type: string
                    maxLength: 500
                description:
                    type: string
                    format: text
                    nullable: true
                communityId:
                    type: string
                    format: uuid
                    nullable: true
                groupId:
                    type: string
                    format: uuid
                    nullable: true
                options:
                    type: array
                    items:
                        type: string # Just the text for new options
                    minItems: 2
                deadline:
                    type: string
                    format: date-time
                    nullable: true
                isPublic:
                    type: boolean
                    default: true
                allowMultipleVotes:
                    type: boolean
                    default: false
                showResultsBeforeDeadline:
                    type: boolean
                    default: true
            required:
                - question
                - options

        PollVoteRequest:
            type: object
            properties:
                selectedOptions: # Array of option IDs (UUIDs) or indices
                    type: array
                    items:
                        type: string # Assuming option IDs (UUIDs)
                    minItems: 1
            required:
                - selectedOptions

        CommentRequest:
            type: object
            properties:
                content:
                    type: string
                    format: text
                parentId:
                    type: string
                    format: uuid
                    nullable: true
            required:
                - content

        ReactionRequest:
            type: object
            properties:
                reactionType:
                    $ref: "#/components/schemas/ReactionTypeEnum"
            required:
                - reactionType

        ConnectionRequestRequest:
            type: object
            properties:
                recipientId:
                    type: string
                    format: uuid
            required:
                - recipientId

        BlockUserRequest:
            type: object
            properties:
                userIdToBlock:
                    type: string
                    format: uuid
            required:
                - userIdToBlock

        MessageRequest:
            type: object
            properties:
                recipientId:
                    type: string
                    format: uuid
                content:
                    type: string
                    format: text
            required:
                - recipientId
                - content

        TagRequest:
            type: object
            properties:
                name:
                    type: string
                    maxLength: 50
            required:
                - name

        BloodGroupRequest:
            type: object
            properties:
                bloodGroup:
                    type: string
                    maxLength: 5 # e.g., A+, O-
            required:
                - bloodGroup

        PaginatedUsersResponse:
            type: object
            properties:
                data:
                    type: array
                    items:
                        $ref: "#/components/schemas/UserWithProfile"
                total:
                    type: integer
                page:
                    type: integer
                limit:
                    type: integer
        # ... Add other PaginatedXResponse schemas as needed for Posts, Events, etc.
        PaginatedPostsResponse:
            type: object
            properties:
                data:
                    type: array
                    items:
                        $ref: "#/components/schemas/Post"
                total:
                    type: integer
                page:
                    type: integer
                limit:
                    type: integer

    #=====================================================
    # Common Response Definitions
    #=====================================================
    responses:
        UnauthorizedError: # 401
            description: Authentication is required and has failed or has not yet been provided.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    example:
                        error: "unauthorized"
                        code: 401
                        message: "Valid authentication credentials were not provided."
                        timestamp: "2024-05-30T15:00:00Z"

        ForbiddenError: # 403
            description: The authenticated user does not have permission to perform the requested action on the resource.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    example:
                        error: "forbidden_access"
                        code: 403
                        message: "You do not have the necessary permissions to access or modify this resource."
                        timestamp: "2024-05-30T15:01:00Z"
        NotFoundError: # 404
            description: The requested resource could not be found on the server.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    example:
                        error: "resource_not_found"
                        code: 404
                        message: "The specified `item` with 'identifier' 'xyz' does not exist."
                        timestamp: "2024-05-30T15:02:00Z"
        BadRequestError: # 400
            description: "The server cannot or will not process the request due to something perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing). Check the `details` array for specific field errors."
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    example:
                        error: "validation_error"
                        code: 400
                        message: "Request validation failed for 1 field(s)."
                        details:
                            - field: "startDate"
                              message: "Start date must be in the future."
                        timestamp: "2024-05-30T15:03:00Z"
        ConflictError: # For 409
            description:
                The request could not be completed due to a conflict with the current state of the target resource.
                This code is used in situations where the user might be able to resolve the conflict and resubmit the request.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    example:
                        error: "resource_conflict"
                        code: 409
                        message: "A user with the provided email address already exists."
                        timestamp: "2024-05-30T15:04:00Z"
        TooManyRequestsError: # For 429
            description: |
                The user has sent too many requests in a given amount of time ("rate limiting").
                The `Retry-After` header might be included to indicate how long to wait before making a new request.
            headers:
                Retry-After:
                    description: The number of seconds to wait before making a new request.
                    schema:
                        type: integer
                    example: 60 # 60 seconds
                X-RateLimit-Limit:
                    $ref: "#/components/headers/X-RateLimit-Limit"
                X-RateLimit-Remaining:
                    $ref: "#/components/headers/X-RateLimit-Remaining"
                X-RateLimit-Reset:
                    $ref: "#/components/headers/X-RateLimit-Reset"
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    example:
                        error: "rate_limit_exceeded"
                        code: 429
                        message: "You have exceeded the allowed number of requests. Please try again later."
                        timestamp: "2024-05-30T15:05:00Z"
        InternalServerError: # 500
            description: |
                An unexpected condition was encountered on the server that prevented it from fulfilling the request.
                This error is generally not the client's fault.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    example:
                        error: "internal_server_error"
                        code: 500
                        message: "An unexpected error occurred. Please try again later. If the problem persists, contact support."
                        timestamp: "2024-05-30T15:06:00Z"

        SuccessMessageResponse:
            description: Generic success response with a message.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/SuccessMessageResponse"
                    example:
                        message: "Logged in successfully"
                        data: [
                            {
                                "accessToken" : "token"
                            }
                        ]



# Paths will be extensive. Starting with Authentication.
paths:
    /auth/register:
        post:
            tags:
                - Authentication
            summary: Register a new user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AuthRegisterRequest"
            responses:
                "201":
                    description: User registered, verification email sent.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    userId:
                                        type: string
                                        format: uuid
                                    message:
                                        type: string
                "400":
                    $ref: "#/components/responses/BadRequestError" # e.g., email already exists
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/login:
        post:
            tags:
                - Authentication
            summary: Log in an existing user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AuthLoginRequest"
            responses:
                "200":
                    description: Login successful.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/AuthTokenResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError" # Invalid credentials
                "401":
                    $ref: "#/components/responses/UnauthorizedError" # User not verified
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/verify-email:
        post:
            tags:
                - Authentication
            summary: Verify user's email using a token
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/VerifyEmailRequest"
            responses:
                "200":
                    $ref: "#/components/responses/SuccessMessageResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError" # Invalid or expired token
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/resend-verification-email:
        post:
            tags:
                - Authentication
            summary: Resend verification email
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ResendVerificationEmailRequest"
            responses:
                "200":
                    $ref: "#/components/responses/SuccessMessageResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError" # User not found or already verified
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/forgot-password:
        post:
            tags:
                - Authentication
            summary: Initiate password reset process
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ForgotPasswordRequest"
            responses:
                "200":
                    $ref: "#/components/responses/SuccessMessageResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError" # User not found
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/reset-password:
        post:
            tags:
                - Authentication
            summary: Reset password using a token
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ResetPasswordRequest"
            responses:
                "200":
                    $ref: "#/components/responses/SuccessMessageResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError" # Invalid token or password policy
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/refresh-token:
        post:
            tags:
                - Authentication
            summary: Obtain a new access token using a refresh token
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/RefreshTokenRequest"
            responses:
                "200":
                    description: New access token generated.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken:
                                        type: string
                "401":
                    $ref: "#/components/responses/UnauthorizedError" # Invalid refresh token
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /auth/logout:
        post:
            tags:
                - Authentication
            summary: Log out a user
            security:
                - bearerAuth: []
            responses:
                "200":
                    $ref: "#/components/responses/SuccessMessageResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    # --- Users ---
    /users/me:
        get:
            tags:
                - Users
            summary: Get current authenticated user's details
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Current user details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserWithProfile"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        put:
            tags:
                - Users
            summary: Update current authenticated user's core details
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserUpdateRequest"
            responses:
                "200":
                    description: User updated successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /users/me/password:
        patch:
            tags:
                - Users
            summary: Change current authenticated user's password
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ChangePasswordRequest"
            responses:
                "200":
                    $ref: "#/components/responses/SuccessMessageResponse"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /users/{userId}:
        get:
            tags:
                - Users
            summary: Get a specific user's public profile
            parameters:
                - $ref: "#/components/parameters/userIdParam"
            security:
                - bearerAuth: [] # Optional, for enhanced info if connected
            responses:
                "200":
                    description: User profile details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserWithProfile" # Or a more restricted public profile schema
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /users:
        get:
            tags:
                - Users
            summary: Get a list of users (admin or with search/filtering)
            security:
                - bearerAuth: [] # Admin role might be required for full list
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/searchQueryParam"
                - name: universityId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - name: role
                  in: query
                  schema:
                      $ref: "#/components/schemas/UserRoleEnum"
            responses:
                "200":
                    description: A list of users.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedUsersResponse"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"

    # --- User Profiles ---
    /users/me/profile:
        get:
            tags:
                - User Profile Sections
            summary: Get current authenticated user's profile
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: User profile details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserProfile"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        put:
            tags:
                - User Profile Sections
            summary: Update current authenticated user's profile
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UserProfileUpdateRequest"
            responses:
                "200":
                    description: Profile updated successfully.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserProfile"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /users/me/profile/education:
        get:
            tags:
                - User Profile Sections
            summary: Get all education entries for the current user
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: List of education entries.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Education"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
        post:
            tags:
                - User Profile Sections
            summary: Add education entry for the current user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EducationRequest"
            responses:
                "201":
                    description: Education entry created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Education"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /users/me/profile/education/{educationId}:
        parameters:
            - $ref: "#/components/parameters/educationIdParam"
        put:
            tags:
                - User Profile Sections
            summary: Update an education entry
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/EducationRequest"
            responses:
                "200":
                    description: Education entry updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Education"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - User Profile Sections
            summary: Delete an education entry
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Education entry deleted.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /users/me/profile/achievements:
        get:
            tags:
                - User Profile Sections
            summary: Get all achievements for the current user
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: List of achievement entries.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Achievement"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
        post:
            tags:
                - User Profile Sections
            summary: Add an achievement for the current user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AchievementRequest"
            responses:
                "201":
                    description: Achievement entry created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Achievement"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /users/me/profile/achievements/{achievementId}:
        parameters:
            - $ref: "#/components/parameters/achievementIdParam"
        put:
            tags:
                - User Profile Sections
            summary: Update an achievement entry
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/AchievementRequest"
            responses:
                "200":
                    description: Achievement entry updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Achievement"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - User Profile Sections
            summary: Delete an achievement entry
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Achievement entry deleted.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Universities ---
    /universities:
        get:
            tags:
                - Universities
            summary: Get a list of all universities
            parameters:
                - $ref: "#/components/parameters/pageParem"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/searchQueryParam"
            responses:
                "200":
                    description: A list of universities.
                    content:
                        application/json:
                            schema:
                                type: array # Add PaginatedUniversitiesResponse if needed
                                items:
                                    $ref: "#/components/schemas/University"
        post:
            tags:
                - Universities
            summary: Create a new university (Admin only)
            security:
                - bearerAuth: [] # Requires admin role
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UniversityRequest"
            responses:
                "201":
                    description: University created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/University"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"

    /universities/{universityId}:
        parameters:
            - $ref: "#/components/parameters/universityIdParam"
        get:
            tags:
                - Universities
            summary: Get details of a specific university
            responses:
                "200":
                    description: University details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/University"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        put:
            tags:
                - Universities
            summary: Update a university's details (Admin only)
            security:
                - bearerAuth: [] # Requires admin role
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UniversityRequest"
            responses:
                "200":
                    description: University updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/University"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Universities
            summary: Delete a university (Admin only)
            security:
                - bearerAuth: [] # Requires admin role
            responses:
                "204":
                    description: University deleted.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Communities ---
    # Note: Community creation might be tied to university creation or an admin action.
    # Assuming a general /communities endpoint for listing/admin creation for now.
    /communities:
        get:
            tags:
                - Communities
            summary: Get a list of communities
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/searchQueryParam"
                - name: universityId
                  in: query
                  description: Filter communities by university ID.
                  schema:
                      type: string
                      format: uuid
            responses:
                "200":
                    description: A list of communities.
                    content:
                        application/json:
                            schema:
                                type: array # Add PaginatedCommunitiesResponse if needed
                                items:
                                    $ref: "#/components/schemas/Community"
        post:
            tags:
                - Communities
            summary: Create a community (Admin/System action)
            security:
                - bearerAuth: [] # Requires admin role
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CommunityRequest"
            responses:
                "201":
                    description: Community created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Community"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"

    /communities/{communityId}:
        parameters:
            - $ref: "#/components/parameters/communityIdParam"
        get:
            tags:
                - Communities
            summary: Get details of a specific community
            responses:
                "200":
                    description: Community details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Community"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        put:
            tags:
                - Communities
            summary: Update a community's details (Admin/Community Admin)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            # Partial update for community
                            type: object
                            properties:
                                name:
                                    type: string
                                    maxLength: 255
                                description:
                                    type: string
                                    format: text
                                    nullable: true
                                coverImage:
                                    type: string
                                    format: url
                                    nullable: true
                                logo:
                                    type: string
                                    format: url
                                    nullable: true
                                isPublic:
                                    type: boolean
            responses:
                "200":
                    description: Community updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Community"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /communities/my:
        get:
            tags:
                - Communities
            summary: Get the community of the currently authenticated user
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: User's community details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Community"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError" # If user not associated with a university/community

    /communities/{communityId}/members:
        parameters:
            - $ref: "#/components/parameters/CommunityIdParam"
        get:
            tags:
                - Communities
            summary: Get a list of members in a community
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
                - $ref: "#/components/parameters/SearchQueryParam"
                - name: role
                  in: query
                  schema:
                      $ref: "#/components/schemas/CommunityRoleEnum"
            responses:
                "200":
                    description: A list of community members.
                    content:
                        application/json:
                            schema:
                                type: array # Add PaginatedCommunityMembersResponse
                                items:
                                    $ref: "#/components/schemas/CommunityMember"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        post:
            tags:
                - Communities
            summary: Join a community (or request to join)
            description: Auto-joins if user's university matches and it's the main community.
            security:
                - bearerAuth: []
            responses:
                "201":
                    description: Successfully joined community or request sent.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CommunityMember"
                "400":
                    $ref: "#/components/responses/BadRequestError" # Already a member, or not eligible
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /communities/{communityId}/members/{userId}:
        parameters:
            - $ref: "#/components/parameters/CommunityIdParam"
            - $ref: "#/components/parameters/UserIdParam"
        put:
            tags:
                - Communities
            summary: Update a member's role (Admin/Community Admin)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CommunityMemberRoleRequest"
            responses:
                "200":
                    description: Member role updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CommunityMember"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Communities
            summary: Remove a member from a community (Admin/Community Admin or self-leave)
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Member removed.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Groups ---
    /communities/{communityId}/groups:
        parameters:
            - $ref: "#/components/parameters/CommunityIdParam"
        get:
            tags:
                - Groups
            summary: Get all groups within a specific community
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
                - $ref: "#/components/parameters/SearchQueryParam"
                - name: isPublic
                  in: query
                  schema:
                      type: boolean
            responses:
                "200":
                    description: A list of groups.
                    content:
                        application/json:
                            schema:
                                type: array # Add PaginatedGroupsResponse
                                items:
                                    $ref: "#/components/schemas/Group"
                "404":
                    $ref: "#/components/responses/NotFoundError" # Community not found
        post:
            tags:
                - Groups
            summary: Create a new group within a community
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GroupRequest"
            responses:
                "201":
                    description: Group created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Group"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError" # Not a member of community
                "404":
                    $ref: "#/components/responses/NotFoundError" # Community not found

    /groups/{groupId}:
        parameters:
            - $ref: "#/components/parameters/GroupIdParam"
        get:
            tags:
                - Groups
            summary: Get details of a specific group
            responses:
                "200":
                    description: Group details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Group"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        put:
            tags:
                - Groups
            summary: Update a group's details (Group Admin/Moderator)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GroupRequest" # Can be partial
            responses:
                "200":
                    description: Group updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Group"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Groups
            summary: Delete a group (Group Admin)
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Group deleted.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /groups: # For discovery of public groups
        get:
            tags:
                - Groups
            summary: Get all public groups across all communities
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
                - $ref: "#/components/parameters/SearchQueryParam"
                - $ref: "#/components/parameters/TagQueryParam"
            responses:
                "200":
                    description: A list of public groups.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Group"

    /groups/{groupId}/members:
        parameters:
            - $ref: "#/components/parameters/GroupIdParam"
        get:
            tags:
                - Groups
            summary: Get a list of members in a group
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
                - $ref: "#/components/parameters/SearchQueryParam"
                - name: role
                  in: query
                  schema:
                      $ref: "#/components/schemas/CommunityRoleEnum"
            responses:
                "200":
                    description: A list of group members.
                    content:
                        application/json:
                            schema:
                                type: array # Add PaginatedGroupMembersResponse
                                items:
                                    $ref: "#/components/schemas/GroupMember"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        post:
            tags:
                - Groups
            summary: Join a group (or request to join)
            security:
                - bearerAuth: []
            responses:
                "201":
                    description: Successfully joined group or request sent.
                    content:
                        application/json:
                            schema:
                                oneOf:
                                    - $ref: "#/components/schemas/GroupMember"
                                    - type: object
                                      properties:
                                          message:
                                              type: string
                                              example: "Request sent for approval"
                "400":
                    $ref: "#/components/responses/BadRequestError" # Already member, not eligible
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError" # Not member of parent community
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /groups/{groupId}/members/{userId}:
        parameters:
            - $ref: "#/components/parameters/GroupIdParam"
            - $ref: "#/components/parameters/UserIdParam"
        put:
            tags:
                - Groups
            summary: Update a member's role in a group (Group Admin)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/GroupMemberRoleRequest"
            responses:
                "200":
                    description: Member role updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GroupMember"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Groups
            summary: Remove a member from a group (Group Admin or self-leave)
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Member removed.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /groups/{groupId}/member-requests:
        parameters:
            - $ref: "#/components/parameters/GroupIdParam"
        get:
            tags:
                - Groups
            summary: List pending membership requests (Group Admin/Mod)
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: List of pending requests.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/GroupMember" # Members with 'pending' status or a dedicated request schema
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /groups/{groupId}/member-requests/{userId}/approve:
        parameters:
            - $ref: "#/components/parameters/GroupIdParam"
            - $ref: "#/components/parameters/UserIdParam"
        post:
            tags:
                - Groups
            summary: Approve a membership request
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Membership request approved.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GroupMember"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /groups/{groupId}/member-requests/{userId}/reject:
        parameters:
            - $ref: "#/components/parameters/GroupIdParam"
            - $ref: "#/components/parameters/UserIdParam"
        post:
            tags:
                - Groups
            summary: Reject a membership request
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Membership request rejected.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/GroupMember" # Or a success message
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Posts ---
    /posts:
        get:
            tags:
                - Posts
            summary: Get a feed of posts
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
                - name: communityId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - name: groupId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - name: authorId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - name: isPublic
                  in: query
                  schema:
                      type: boolean
                - $ref: "#/components/parameters/TagQueryParam"
                - name: status
                  in: query
                  schema:
                      $ref: "#/components/schemas/PostStatusEnum"
                - name: sortBy
                  in: query
                  schema:
                      type: string
                      enum: [createdAt, viewCount, likeCount]
            responses:
                "200":
                    description: A list of posts.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/PaginatedPostsResponse"
        post:
            tags:
                - Posts
            summary: Create a new post
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PostRequest"
            responses:
                "201":
                    description: Post created (might be pending approval).
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Post"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError" # e.g., trying to post in a group not member of

    /posts/{postId}:
        parameters:
            - $ref: "#/components/parameters/PostIdParam"
        get:
            tags:
                - Posts
            summary: Get details of a specific post
            responses:
                "200":
                    description: Post details.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Post"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        put:
            tags:
                - Posts
            summary: Update an existing post (Author or Admin/Moderator)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PostRequest" # Can be partial
            responses:
                "200":
                    description: Post updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Post"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Posts
            summary: Delete a post (Author or Admin/Moderator)
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Post deleted.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /posts/{postId}/approve:
        parameters:
            - $ref: "#/components/parameters/PostIdParam"
        post:
            tags:
                - Posts
            summary: Approve a pending post (Admin/Moderator)
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Post approved.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Post"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
    # ... (Reject, Pin, Feature for Posts)

    /users/me/posts/saved:
        get:
            tags:
                - Posts
            summary: Get posts saved by the current user
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: List of saved posts.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Post"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /users/me/posts/{postId}/save:
        parameters:
            - $ref: "#/components/parameters/PostIdParam"
        post:
            tags:
                - Posts
            summary: Save a post for the current user
            security:
                - bearerAuth: []
            responses:
                "201":
                    description: Post saved.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
                "409": # Conflict - already saved
                    $ref: "#/components/responses/BadRequestError"
        delete:
            tags:
                - Posts
            summary: Unsave a post for the current user
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Post unsaved.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Events (similar structure to Posts) ---
    # GET /events, POST /events
    # GET /events/{eventId}, PUT /events/{eventId}, DELETE /events/{eventId}
    # POST /events/{eventId}/attendees, GET /events/{eventId}/attendees, DELETE /events/{eventId}/attendees/me
    # GET /users/me/events

    # --- Polls (similar structure to Posts) ---
    # GET /polls, POST /polls
    # GET /polls/{pollId}, PUT /polls/{pollId}, DELETE /polls/{pollId}
    # POST /polls/{pollId}/approve, POST /polls/{pollId}/reject
    # POST /polls/{pollId}/votes, GET /polls/{pollId}/votes, GET /polls/{pollId}/results

    # --- Comments ---
    /posts/{postId}/comments:
        parameters:
            - $ref: "#/components/parameters/PostIdParam"
        get:
            tags:
                - Comments
            summary: Get comments for a post
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
                - name: sortBy
                  in: query
                  schema:
                      type: string
                      enum: [createdAt, likeCount]
            responses:
                "200":
                    description: List of comments.
                    content:
                        application/json:
                            schema:
                                type: array # PaginatedCommentsResponse
                                items:
                                    $ref: "#/components/schemas/Comment"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        post:
            tags:
                - Comments
            summary: Add a comment to a post
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CommentRequest"
            responses:
                "201":
                    description: Comment created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # GET /events/{eventId}/comments, POST /events/{eventId}/comments (similar to post comments)

    /comments/{commentId}:
        parameters:
            - $ref: "#/components/parameters/CommentIdParam"
        put:
            tags:
                - Comments
            summary: Update a comment (Author)
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                content:
                                    type: string
                                    format: text
                            required:
                                - content
            responses:
                "200":
                    description: Comment updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete:
            tags:
                - Comments
            summary: Delete a comment (Author or Admin/Moderator)
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Comment deleted.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Reactions ---
    /posts/{postId}/reactions:
        parameters:
            - $ref: "#/components/parameters/PostIdParam"
        post:
            tags:
                - Reactions
            summary: Add or update a reaction to a post
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ReactionRequest"
            responses:
                "200": # Or 201 if creating new
                    description: Reaction added/updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Reaction" # Or just updated post like_count
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"
        delete: # To remove user's own reaction
            tags:
                - Reactions
            summary: Remove a reaction from a post
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Reaction removed.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError" # Post or reaction not found
        get:
            tags:
                - Reactions
            summary: Get reactions for a post
            parameters:
                - name: type
                  in: query
                  schema:
                      $ref: "#/components/schemas/ReactionTypeEnum"
            responses:
                "200":
                    description: List of reactions.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Reaction"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # /comments/{commentId}/reactions (similar to post reactions)

    # --- User Connections ---
    /connections/request:
        post:
            tags:
                - Connections
            summary: Send a connection request to a user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ConnectionRequestRequest"
            responses:
                "201":
                    description: Connection request sent.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserConnection"
                "400":
                    $ref: "#/components/responses/BadRequestError" # e.g., request to self, already connected/pending
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError" # Recipient not found

    /connections/requests/pending:
        get:
            tags:
                - Connections
            summary: Get pending connection requests for the authenticated user
            security:
                - bearerAuth: []
            parameters:
                - name: type
                  in: query
                  schema:
                      type: string
                      enum: [sent, received]
            responses:
                "200":
                    description: List of pending connection requests.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/UserConnection"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /connections/requests/{requestId}/accept:
        parameters:
            - $ref: "#/components/parameters/ConnectionRequestIdParam"
        post:
            tags:
                - Connections
            summary: Accept a connection request
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Connection request accepted.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserConnection"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError" # Not the recipient
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /connections/requests/{requestId}/reject:
        parameters:
            - $ref: "#/components/parameters/ConnectionRequestIdParam"
        post:
            tags:
                - Connections
            summary: Reject a connection request
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Connection request rejected.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserConnection"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /connections:
        get:
            tags:
                - Connections
            summary: Get a list of accepted connections for the authenticated user
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
                - $ref: "#/components/parameters/SearchQueryParam"
            responses:
                "200":
                    description: List of connected users.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User" # Or UserWithProfile
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /connections/{userId}: # To remove a connection
        parameters:
            - $ref: "#/components/parameters/UserIdParam"
        delete:
            tags:
                - Connections
            summary: Remove a connection with another user
            security:
                - bearerAuth: []
            responses:
                "204":
                    description: Connection removed.
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    # --- Messages ---
    /messages:
        post:
            tags:
                - Messages
            summary: Send a message to another user
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/MessageRequest"
            responses:
                "201":
                    description: Message sent.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Message"
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError" # Recipient not found

    /messages/chat/{userId}:
        parameters:
            - $ref: "#/components/parameters/UserIdParam"
        get:
            tags:
                - Messages
            summary: Get chat history with a specific user
            security:
                - bearerAuth: []
            parameters:
                - name: before # For pagination (messageId or timestamp)
                  in: query
                  schema:
                      type: string
                - $ref: "#/components/parameters/LimitParam"
            responses:
                "200":
                    description: Chat history.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Message"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /messages/conversations:
        get:
            tags:
                - Messages
            summary: Get a list of conversations for the authenticated user
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
            responses:
                "200":
                    description: List of conversations.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Conversation"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    # --- Notifications ---
    /notifications:
        get:
            tags:
                - Notifications
            summary: Get notifications for the authenticated user
            security:
                - bearerAuth: []
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
                - name: isRead
                  in: query
                  schema:
                      type: boolean
            responses:
                "200":
                    description: List of notifications.
                    content:
                        application/json:
                            schema:
                                type: array # PaginatedNotificationsResponse
                                items:
                                    $ref: "#/components/schemas/Notification"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /notifications/{notificationId}/read:
        parameters:
            - $ref: "#/components/parameters/NotificationIdParam"
        post:
            tags:
                - Notifications
            summary: Mark a specific notification as read
            security:
                - bearerAuth: []
            responses:
                "200":
                    description: Notification marked as read.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Notification"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "404":
                    $ref: "#/components/responses/NotFoundError"

    /notifications/read-all:
        post:
            tags:
                - Notifications
            summary: Mark all notifications as read
            security:
                - bearerAuth: []
            responses:
                "200":
                    $ref: "#/components/responses/SuccessMessage"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    # --- Tags ---
    /tags:
        get:
            tags:
                - Tags
            summary: Get a list of all tags
            parameters:
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
                - $ref: "#/components/parameters/SearchQueryParam"
            responses:
                "200":
                    description: A list of tags.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Tag"
        post:
            tags:
                - Tags
            summary: Create a new tag (Admin or implicit)
            security:
                - bearerAuth: [] # Admin for direct creation
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/TagRequest"
            responses:
                "201":
                    description: Tag created.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Tag"
                "400":
                    $ref: "#/components/responses/BadRequestError" # e.g., tag already exists
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
                "403":
                    $ref: "#/components/responses/ForbiddenError"

    # --- Search ---
    /search:
        get:
            tags:
                - Search
            summary: Global search endpoint
            parameters:
                - name: q
                  in: query
                  required: true
                  description: Search query.
                  schema:
                      type: string
                - name: type
                  in: query
                  description: Type of content to search.
                  schema:
                      type: string
                      enum: [posts, events, users, groups, communities]
                - name: universityId
                  in: query
                  schema:
                      type: string
                      format: uuid
                - $ref: "#/components/parameters/TagsQueryParam"
                - $ref: "#/components/parameters/PageParam"
                - $ref: "#/components/parameters/LimitParam"
            responses:
                "200":
                    description: Search results.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    posts:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Post"
                                    events:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Event"
                                    users:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/UserWithProfile"
                                    groups:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Group"
                                    communities:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Community"
                "400":
                    $ref: "#/components/responses/BadRequestError" # e.g., missing query

    # --- Miscellaneous ---
    /users/me/calendar:
        get:
            tags:
                - Miscellaneous
            summary: Get a calendar view of user's events
            security:
                - bearerAuth: []
            parameters:
                - name: month
                  in: query
                  description: Month in YYYY-MM format.
                  schema:
                      type: string
                      pattern: '^\d{4}-\d{2}$'
                - name: view
                  in: query
                  schema:
                      type: string
                      enum: [month, week, day]
            responses:
                "200":
                    description: Calendar events.
                    content:
                        application/json:
                            schema:
                                type: array # Structure depends on calendar view needs
                                items:
                                    $ref: "#/components/schemas/Event"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"

    /users/me/profile/blood-group:
        post:
            tags:
                - User Profile Sections
                - Miscellaneous
            summary: Set or update user's blood group
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/BloodGroupRequest"
            responses:
                "200":
                    description: Blood group updated.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/UserProfile" # Or just success message
                "400":
                    $ref: "#/components/responses/BadRequestError"
                "401":
                    $ref: "#/components/responses/UnauthorizedError"
